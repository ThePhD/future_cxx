<pre class='metadata'>
Title: All Compilers are Created Equal
Shortname: D1130
Revision: 0
Audience: SG15
Status: D
Group: WG21s
URL: 
!Current Source: <a href="https://github.com/ThePhD/future_cxx/blob/master/papers/source/d1330.bs">github.com/ThePhD/future_cxx/blob/master/papers/source/d1330.bs</a>
!Current: <a href="https://rawgit.com/ThePhD/future_cxx/master/papers/d1330.html">https://rawgit.com/ThePhD/future_cxx/master/papers/d1330.html</a>
!Implementation: <a href="https://github.com/ThePhD/future_cxx">https://github.com/ThePhD/future_cxx</a>
Repository: ThePhD/future_cxx
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
Abstract: This paper attempts to provide a level of indirection upon which build system and package management tools build sane, higher-level abstractions.
Date: 2018-10-01
Markup Shorthands: markdown yes, biblio yes, markup yes
</pre>

<pre class=include>
path: wording_style.bs
</pre>

# Revision History # {#changelog}

## Revision 0 - October 5th ## {#changelog-r0}

	Initial release.



# Motivation # {#motivation}

I made the foolish mistake of opening my mouth during SG-15's second-ever meeting. After a few intense stares and a little pressure, I caved and volunteered to write what the user perspective for using C++ libraries and building C++ libraries, packages, and similar is like. Spoiler alert:

It sucks.

From 4 different package managers which each have their own idea of how packages should be handled, to over 8 different build and meta-build systems with varying levels of "what the hell is going on in this nightmare", C++ build and packaging systems are a glimpse into what H.P. Lovecraft might fashion if he was build engineer and had 10 years of free time. From Perl build scripts to bash-wrapped Tcl-coded "get me out of here", the C++ ecosystem is less an ecosystem and more a personification of what Hell would look like without any kind of legion or leadership, each and every build its own demon that people hire specialized people to take care of, all while heaping greater and greater requirements on them. From linking with object files that can never be deleted because they are the last of a source repository that was blown up by engineers that were alive before the time of reliable backups or source control, to ouroboros-like cyclical dependencies where libraries depend on each other and require multiple builds to resolve properly the enterprise C++ ecosystem is a nightmare that can be neither tamed nor fixed.

So let's just not start there.

A much easier to fix problem is the startup: new C++ users and veteran C++ users who are sick of hammering out CMake boilerplate and writing platform-dependent Makefiles are ripe for the harvest with a new build system and package manager. This paper will focus on the bits and bobs necessary to make well-behaved code work nicely.


<pre class=biblio>
{
	
	"p1330r1": {
		"authors": [
			"Rein Halbersma"
		],
		"title": "User-Defined Literals for size_t",
		"href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p1330r1.pdf",
		"date": "October 12th, 2018"
	}
}
</pre>
