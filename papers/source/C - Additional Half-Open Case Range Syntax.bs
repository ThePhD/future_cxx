<pre class='metadata'>
Title: Additional Half-Open case Range Syntax
H1: Additional Half-Open <code>case</code> Range Syntax
Shortname: 3601
Revision: 1
!Previous Revisions: <a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3588.htm">n3588 (r0)</a>
Status: P
Date: 2025-06-22
Group: WG14
!Proposal Category: Change Request, Feature Request  
!Target: C2y
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
Editor: Shepherd (Shepherd's Oasis LLC), shepherd@soasis.org
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Additional%20Half-Open%20Case%20Range%20Syntax.html
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Additional%20Half-Open%20Case%20Range%20Syntax.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, This Version, Paper Source, Implementation, Issue Tracking, Project, Audience, Proposal Category, Target
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: An additional syntax for case ranges to enable better constraint violations.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>





# Revision History # {#changelog}



## Revision 1 - June 22<sup>nd</sup>, 2025 ## {#changelog-r1}

- Add wording for single-tokenization for Punctuators ([[#wording-6.4.7]]).
- Explain additional motivations in [[#design-existing]].




## Revision 0 - May 30<sup>th</sup>, 2025 ## {#changelog-r0}

- Initial release. ✨




# Introduction & Motivation # {#motivation}

During the WG14 Minneapolis 2024 meeting, a long-standing existing practice was accepted into C2y for denoting a range of values to `switch` on:

```cpp
switch (n) {
case 1 ... 10:
	something ();
	break;
}
```

This is good, and synchronizes the standard with widespread current implementations and extensions. However, there is a distinct problem in that `case 1 ... 10`  denotes a fully inclusive range, that counts for both 1 and 10. This leads to unfortunate syntax and behaviors to make a range of 1 element, or a range of no elements:

```cpp
switch (n) {
case 1 ... 10:
	something ();
	break;
case 11 ... 11:
	something ();
	break;
case 21 ... 12:
	not_correct();
	break;
}
```

The second is a case range of 1 element: `11`. The third is an empty case range: it puts the high value first and the low value second. Unfortunately, this is error-prone and problematic because it's a common user error: accidentally typing the wrong value first or getting closely-related values incorrect is a thing that can happen very often.

This problem with the current, existing case range design supported in C compilers resulted in the discussion on Monday, September 30th during the WG14 meeting where it was discussed in what ways this could be mitigated. The ultimate problem is that it was impossible to provide a Constraint for accidentally swapping the High and Low values of the case range expression because it was a relied-upon means of creating an empty range through Macro Usage:

```cpp
#ifndef NUM_APPLES
/* default value */
#define NUM_APPLES 5
#endif

switch (apple_val) {
	case 0 ... NUM_APPLES:
		/* do something */
		break;
}

// ...
```

Part of this idiom is that users can do `-DNUM_APPLES=-1` and that will "turn off" everything in the `/* do something */` portion of the `switch`'s `case` label. Therefore, the recommendation that was cultivated during the Minneapolis meeting was "do not warn if it's a macro because it was probably intentional, otherwise warn because it is likely a mistake". Briefly ignoring non-fused implementation concerns (separated preprocessor vs. front-end with the front-end generating errors for things it does not understand may or may not be macro values), there is a much heavier concern that the moment one uses macros, implementations may stop warning on things that are mistakes. Similarly, this leads to other questions: what if it's a `constexpr` variable, does that silence warnings? A `sizeof` expression that generates a constant value? There's many different ways that this could go wrong.

The better way to handle this is by having it be a Constraint (i.e., typically an error in most implementations). The use cases above are valid and are part of existing practice, so this paper instead proposes a different syntax for "half-open ranges", as has been done in other languages that have encountered this same problem and moved to get around this issue.




# Design # {#design}

We cannot replace the existing syntax as it has strong existing practice, so we provide an alternative syntax to give us the power that we need. The syntax chosen in this proposal is `..<`, which is meant to clearly illustrate half-open/half-inclusive ("one less than the end") ranges. The reasons for choosing this syntax are simple:

- it is a token sequence not present in C or C++ and therefore can be safely integrated in most languages;
- it is not valid as part of any valid syntactic form of of parseable language construct in C or C++;
- it is visually similar to `...` while being distinct enough to not be missed like just having two dots `..`;
- and, the less than symbol matches nicely with the idea that it is "from `low-value` up to (but not including) `high-value`", similar to for loop syntax.

For these reasons, we settled with `..<`. This provides us with a way of accessing a constraint violation without changing the meaning of existing code. It allows us to properly diagnose the following problem:

```cpp
extern int n;
extern void f();

int main () {
	switch(n) {
	case 8 ... 7: // mistake: probably diagnosed!
		f();
		break;
	}
	switch(n) {
	case 8 ..< 7: // mistake: constraint violation!
		f();
		break;
	}
	return 0;
}

```

and ALSO allows us to diagnose it even if the name comes from a macro or a `constexpr` variable, which provides a proper out from the way thorny diagnostics implementers were brainstorming at the Minneapolis 2024 meeting:

```cpp
extern int n;
extern void f();

#define LO 0
#define HI 50

constexpr int lo = 60;
constexpr int hi = 99;

int main () {
	switch(n) {
	case HI ... LO-1: // mistake: not diagnosed
	// Minneapolis 2024 recommendation: DO NOT diagnose!!
	case hi ... lo-1: // mistake: not diagnosed
	// Minneapolis 2024 recommendation: DO NOT diagnose!!
		f();
		break;
	}
	switch(n) {
	case HI ..< LO: // mistake: constraint violated!
	case hi ..< lo: // mistake: constraint violated!
		f();
		break;
	}
	return 0;
}
```



## Existing Error/Warning Implementations ## {#design-existing}

As it turns out, despite the recommendations and discussion of the Minneapolis 2024 meeting from implementers, the actual implementations only have 2 extremes:

- always warn/error, all the time;
- or, never warn, ever.

GCC and Clang (since at least version 4 and version 3.8, respectively, all the way through their "trunk" versions) **always** warn on empty ranges. This means that implementations believe that empty ranges are problematic, but by the design of the feature cannot issue a stronger diagnostic due to the design (and the fact that empty ranges are, in fact, configurable). It does not matter if the range comes from a constant variable (implementation-defined `const` variable) or a macro or something is written literally: the implementations ALWAYS warn. This is in line with many other compilers with a higher quality of implementation. NVC, Chibicc, SDCC, Arduino Mega (avr-gcc), and others also ALWAYS warn/error on this, with no flags (other than the standard or macro defining flags) specified:

```cpp
extern int n;
extern void f(void);

#define LO 0
#define HI 50

#if HAVE_CONSTEXPR
constexpr int lo = 60;
constexpr int hi = 99;
#endif
#if HAVE_CONSTANTS
static const int lo_impl = 100;
static const int hi_impl = 241;
#endif

int main () {
	switch(n) {
#if HAVE_CONSTANTS
	case hi_impl ... lo_impl-1: // Minneapolis 2024 recommendation: DO NOT diagnose!!
#endif
	case HI ... LO-1: // Minneapolis 2024 recommendation: DO NOT diagnose!!
#if HAVE_CONSTEXPR
	case hi ... lo-1: // Minneapolis 2024 recommendation: DO NOT diagnose!!
#endif
		f();
		break;
	}
#if 0
	switch(n) {
	case HI ..< LO: // mistake: constraint violated!
	case hi ..< lo: // mistake: constraint violated!
		f();
		break;
	}
#endif
	return 0;
}
```

([Godbolt: https://godbolt.org/z/rxvas4d4e](https://godbolt.org/z/rxvas4d4e))

Some other compilers checked don't bother warning at all, but across most implementations this is either a soft warning or a hard error, which matches the Recommended Practice but does not capture the actual hard-erroring implementations. It also doesn't catch the fact that most compilers warn **unconditionally**, which means that there's actually less appetite to let this kind of code through than was surmised at the Minneapolis 2024 meeting. This points to the idea that maybe a stronger design is needed and necessary, here.



## Syntax ## {#design-syntax}

We chose `..<` because it is visually indicative of "less than" and works fairly well as an individual token recognizable in the preprocessor with no parsing ambiguities in C and C++. We also note that a wide variety of languages also have came to the same conclusion as this paper, that having both a closed range and an open range specifier in the language is necessary for both ease-of-use and intent-specifying, diagnostic-capable reasoning. Some languages:

<table><thead>
	<tr>
		<th>Language</th>
		<th>Closed Range</th>
		<th>Half-open</th>
	</tr></thead>
	<tbody>
	<tr>
		<td>C/C++</td>
		<td>`lo ... hi`</td>
		<td>`lo ..< hi` (This Proposal) </td>
	</tr>
	<tr>
		<td>Swift</td>
		<td>`lo ... hi`</td>
		<td>`lo ..< hi`</td>
	</tr>
	<tr>
		<td>Rust</td>
		<td>`lo ..= hi`</td>
		<td>`lo ..  hi`</td>
	</tr>
	<tr>
		<td>Perl</td>
		<td>`[ lo ... hi ]`</td>
		<td>⛔️</td>
	</tr>
	<tr>
		<td>Raku</td>
		<td>`lo ..  hi`</td>
		<td>`lo ..^ hi`</td>
	</tr>
	<tr>
		<td>Kotlin</td>
		<td>`lo ..  hi`</td>
		<td>`lo ..< hi`</td>
	</tr>
	<tr>
		<td>Ruby</td>
		<td>`lo ... hi`</td>
		<td>`lo ..  hi`</td>
	</tr>
	<tr>
		<td>Odin</td>
		<td>`lo ..= hi`</td>
		<td>`lo ..< hi`</td>
	</tr>
	<tr>
		<td>Python</td>
		<td>`case num if lo <= num <= hi :`</td>
		<td>`case num if lo <= num < hi :`</td>
	</tr>
	</tbody>
</table>


# Existing Practice # {#existing}

Currently, no C compiler implements the additional case range syntax. We are proposing this purely to mitigate the existing problem with the case ranges and to allow for better error checking for existing compilers based on the previous extension.

Previously, [[n3370]]'s older iterations had suggestions for a half-open range. It was dropped for expedience purposes of standardization. However, we believe it would still be a good idea.





# Wording # {#wording}

The following wording is against the latest draft of the C standard.



## Modify §6.4.7 "Punctuators" ## {#wording-6.4.7}

<blockquote>
<div class="wording-clause-header">
<span class="wording-clause-number">6.4.7</span><span class="wording-clause-title">Punctuators</span>
</div>

<div class="wording-section">

<div class="wording-clause-section-title">
Syntax
</div>

<div class="wording-numbered">

*punctuator*: one of
:: `[` `]` `(` `)` `{` `}` `.` `->`
:: `++` `--` `&` `*` `+` `-` `~` `!`
:: `/` `%` `<<` `>>` `<` `>` `<=` `>=` `==` `!=` `^` `|` `&&` `||`
:: `?` `:` `::` `;` `...`<ins> `..<` </ins>
:: `=` `*=` `/=` `%=` `+=` `-=` `<<=` `>>=` `&=` `^=` `|=`
:: `,` `#` `##`
:: `<:` `:>` `<%` `%>` `%:` `%:%:`

</div>

</div>
</blockquote>



## Modify §6.6.2 "Constant range expressions" ## {#wording-6.6.2}

<blockquote>
<div class="wording-clause-header">
<span class="wording-clause-number">6.6.2</span><span class="wording-clause-title">Constant Range Expressions</span>
</div>

<div class="wording-section">

<div class="wording-clause-section-title">
Syntax
</div>

<div class="wording-numbered">

*constant-range-expression*:
:: *constant-expression* `...` *constant-expression*
:: <ins>*constant-expression* `..<` *constant-expression*

</div>

<div class="wording-clause-section-title">
Description
</div>

<div class="wording-numbered">

...
</div>

<div class="wording-clause-section-title">
Constraints
</div>

<div class="wording-numbered">

The constant expressions shall be integer constant expressions.<ins>For a half-open range, the first constant expression shall be less than or equal to the second constant expression.</ins>
</div>


<div class="wording-clause-section-title">
Semantics
</div>

<div class="wording-numbered wording-numbered-4">

The values described by the `...` operator form a *closed range*, which contains all integer values in sequence starting from and including the first, low value, up to and including the second, high value.<sup><del>123)</del></sup>
</div>

<ins>
<div class="wording-newnumbered">

The values described by the `..<` operator form a *half-open range*, which contains all integer values in sequence starting from and including the first, low value, up to but not including the second, high value.
</div>
</ins>

<div>
<span class="footnote"><del><sup>123)</sup> A range is not itself usable as a value and therefore does not have any specific type or representation, or perform any
type conversion.</del></span>
</div>

<div class="wording-numbered wording-numbered-5">

<del>If</del><ins>For closed ranges, if</ins> the arithmetic value of the first constant expression is greater than the <del>one of the second</del><ins>arithmetic value of the second</ins>, the range described by the constant range expression is empty.<ins>For half-open ranges, if the arithmetic value of the first constant expression is equal to the arithmetic value of the second, the range described by the constant range expression is empty.</ins>
</div>

<ins>
<div class="wording-newnumbered">

NOTE&emsp;&emsp;&emsp;&emsp;A range is not itself usable as a value and therefore does not have any specific type or representation, or perform any type conversion.
</div>
</ins>

</div>

<div class="wording-clause-section-title">
Recommended Practice
</div>

<div class="wording-numbered wording-numbered-6">

Implementations are encouraged to emit a diagnostic message when a <ins>range expression results in a closed </ins>range <ins>that</ins> is empty.
</div>

<div class="wording-numbered">

...
</div>

<div class="wording-numbered wording-numbered-8">

EXAMPLE 2&emsp;&emsp;&emsp;&emsp;<del>Because a range expression describes a closed range, it is possible to match past-the-end values such as the size of an array:</del><ins>Range expressions which describe closed ranges allow matching past-the-end values of a sufficiently-sized array, while range expressions which describe half-open ranges will not reference past the end of a sufficiently sized array:</ins>

```cpp
constexpr const int N = 42;
int arr[N];
switch (i) {
	case 0 ... N: // matches the past-the-end range of arr
		f (arr[i]); // not OK, will dereference arr[N]
		g (&arr[i]); // may be OK depending on purpose
		break;
}
switch (i) {
	case 0 ... N - 1: // only matches the valid element range of arr
		f (arr[i]); // OK
		break;
}
```
<ins>

```cpp
switch (i) {
	case 0 ..< N: // only matches the valid element range of arr
		f (arr[i]); // OK
		break;
}
```
</ins>
</div>

<div class="wording-numbered">
...
</div>

<ins>
<div class="wording-newnumbered wording-numbered-10">

EXAMPLE 4&emsp;&emsp;&emsp;&emsp;Half-open ranges can provide better constraints for specific scenarios, such as working naturally with values that are not valid when accidentally flipped:

```cpp
extern int n;
extern void f(int val);

constexpr int lo = -40;
constexpr int hi = 50; 

int main () {
	switch (n) {
		case hi ... lo-1: // mistake: no constraint violation (recommended practice: diagnose)
			f(n);
		break;
	}
	switch (n) {
		case hi ..< lo: // mistake: constraint violation
			f(n);
		break;
	}
	return 0;
}
```
</div>
</ins>


</div>
</blockquote>





<pre class="biblio">
{
	"n3370": {
		"authors": [
			"Alex Celeste"
		],
		"title": "n3370 - Case range expressions, v3.1",
		"href": "https://www.open-std.org/JTC1/SC22/WG14/www/docs/n3370.htm",
		"publisher": "ISO/IEC JTC1 SC22 WG14"
	}
}
</pre>
