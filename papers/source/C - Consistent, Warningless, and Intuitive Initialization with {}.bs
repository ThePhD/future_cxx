<pre class='metadata'>
Title: Consistent, Warningless, and Intuitive Initialization with {}
H1: Consistent, Warningless, and Intuitive Initialization with <code>{}</code>
Shortname: 2900
Revision: 2
!Previous Revisions: <a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2796.htm">N2796 (r1)</a>, <a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2727.htm">N2727 (r0)</a>
Status: P
Date: 2022-01-01
Group: WG14
!Proposal Category: Change Request, Feature Request
!Target Audience: General Developers, Library Developers
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
Editor: Shepherd (Shepherd's Oasis LLC), shepherd@soasis.org
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Consistent,%20Warningless,%20and%20Intuitive%20Initialization%20with%20%7B%7D.html
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/source/C%20-%20Consistent,%20Warningless,%20and%20Intuitive%20Initialization%20with%20%7B%7D.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, This Version, Paper Source, Implementation, Issue Tracking, Project, Audience
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: This proposal fills out the grammar term in C for an empty brace list <code>{}</code>, allowing initialization of all the same types in both regular initializers and designated initializers while retaining compatibility with C++ code.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-color-fix.html
</pre>

<div class="pagebreak"></div>




# Changelog # {#changelog}



## Revision 2 - January 1<sup>st</sup>, 2022 ## {#changelog-r2}

- Use first-member-initialization behavior consistent with the August/September 2021 Virtual Meeting guidance from WG21.
	- *Opinion Poll*: Would WG14 like to adopt something along the lines of N2727 into C23? **19-1-2** (Yes-No-Abstain). So, clear direction.
	- Feedback: "I voted no although I'm in favor in general. I want that union case to be the first member. I also want more clarity."
- Removed restriction on VLAs is not optional as Committee gave an opinion poll to put it in: 
	- *Opinion Poll*: Would WG14 like something along the lines of lifting the restrictions from VLA's to be initialize-able by an empty initializer as specified in N2727? **15-0-6** (Yes-No-Abstain). So clear direction.
	- No additional vote feedback.



## Revision 1 - August 14th, 2021 ## {#changelog-r1}

- Clarify union and aggregate initialization, using motivation from Clang an `-ftrivial-auto-init-var=pattern` (thanks, Hubert Tong!).
- Edits and fixes to the wording (thanks, Robert Seacord!).
- Focus on using static storage duration initialization rules, except for `union`s.



## Revision 0 - May 15th, 2021 ## {#changelog-r0}

- Initial release! ðŸŽ‰




# Introduction & Motivation # {#intro}

The use of "`= { 0 }`" to initialize structures, unions, and arrays is a long-standing pillar of C. But, for a long time it has caused some confusion amongst developers. Whether it was initializing arrays of integers and using "`= { 1 }`" and thinking it would initialize all integers with the value `1` (and being wrong), or getting warnings on some implementations for complicated structures and designated initializers that did not initialize every element, the usage of "`{ 0 }`" has caused quite a bit of confusion.

Furthermore, this has created great confusion about how initializers are supposed to work. Is the `0` the special element that initializes everything to be `0`? Or is it the braces with the `0`? What about nested structures? How come "`struct my_struct_with_nested_struct ms = { 0 };`" is okay, but "`struct my_struct_with_nested_struct ms2 = { 0, 0 };`" start producing warnings about not initializing elements correctly? This confusion leads to people having very poor ideas about how exactly they need to zero-initialize a structure and results in folks either turning off sometimes helpful warnings<sup>[[zcash-warning-disable|[1]]]</sup> or other issues. It also leads people to do things like fallback to using `memset(&ms, 0, sizeof(ms))` or similar patterns rather than just guaranteeing a clear initialization pattern for all structures.

This is also a longstanding compatibility risk with C++, where shared header code that relies on "`= {}`", thinking it is viable C code, find out that its not allowed. This is the case with GCC, where developers as prominent as the Chief Security Maintainer for Alpine, the largest musl-based distro, [recently as April 6th, 2021](https://twitter.com/ariadneconill/status/1379579444365496321) say things like:

> today i learned.  gcc allows this, iâ€™ve used it for years!

Indeed, the use is so ubiquitous that most compilers allow it as an extension and do so quietly until warning level and pedantic checkers are turned on for most compilers and static analyzers! Thankfully for this proposal, every compiler deploying this extension applies the same initialization behavior; perform (almost) identical behavior of static storage duration initialization for every active sub-object/element of the scalar/`struct`/`union` (exceptions [[#design-consistent|detailed further below]]).




# Design # {#design}

As hinted at in the last paragraph of the motivation, there is no special design to be engaging in here. Accepting `= {}` is not only a part of C++, but is existing extension practice in almost every single C compiler that has a shared C/C++ mode, and many other solely-C compilers as an extension (due to its prolific use in many projects). Providing `{}` as an initializer has the unique benefit of being unambiguous. For example, consider the following nested structures:

```cpp
struct core {
	int a;
	double b;
};

struct inner {
	struct core c;
};

struct outer {
	struct inner d;
	int e;
};
```

With this proposal, this code...

```cpp
int main () {
	struct outer o0 = { 0 };
	struct outer o1 = { 0, 1 }; // warnings about brace elision confusion, but compiles
	// ^ "did I 0-initialize inner, and then give "e" the 1 value?"
	return 0;
}
```

can instead be written like this code:

```cpp
int main () {
	struct outer o0 = { }; // completely empty
	struct outer o1 = { { }, 1 };
	// ^ much less ambiguous about what "1" is meant to fill in here
	// without "do I need the '0'?" ambiguity
	return 0;
}
```



## Consistent "static storage duration initialization" ## {#design-consistent}

*Almost* every single compiler which was surveyed, that implements this extension, agrees that "`= { }`" should be the same as "`= { 0 }`", just without the confusing `0` value within the braces (with one notable exception, below). It performs what the C standard calls *static initialization* / *static storage duration initialization*. Therefore, the wording (and, with minor parsing updates, implementation) burden is minimal since we are not introducing a new class of initialization to the language, just extending an already-in-use syntax.

We note that there are cases where this may differ. These are listed in the sub-sections below, though we note that these departures from what `= { 0 }` does are mostly beneficial and ways to guarantee even greater stability than the C Standard currently offers us.


## Union Initialization ## {#design-unions}

In earlier versions of this proposal, unions had an exception placed into its `{}` initialization that stated it would do static initialization for its largest member. This drew a lot of concern from WG14 during the August/September 2021 Virtual Meeting. This leaves two potential options to match Clang behavior ([[#appendix-clang|written about in the Appendix]]):

- specify that the largest member undergoes zero-initialization, and then the first member is statically initialized;
- or, specify that the first member is statically initialized and the rest of the values are left in an unspecified manner, as is consistent with `= { 0 }` initialization.

Clang's extension behavior works with both of these syntaxes, since "unspecified" is a strict superset of "zero-initialize the largest member". Padding bits (bits that exist outside the representation of any members in the union) are still zero-initialized as normal. We provide wording for both alternatives and leave it up to the Committee to choose a given behavior.



# Wording # {#wording}

The following wording is relative to [[N2731]].



## Modify Â§6.7.9 paragraph 1's grammar ## {#wording-6.7.9p1}

<blockquote>
<dl>
	<dt>*initializer:*</dt>
	<dd><ins>**{** **}**</ins></dd>
	<dd>**{** _initializer-list_ **}**</dd>
</dl>
</blockquote>


## Modify Â§6.7.9 paragraph 1 to include a new sentence ## {#wording-6.7.9p1.1}

<blockquote>
<ins>
An empty brace pair (<code>{ }</code>) is called an <i>empty initializer</i> and is referred to as <i>empty initialization</i>.
</ins>
</blockquote>



## Add to to Â§6.7.9 paragraph 3 ## {#wording-6.7.9p3}

<blockquote>
<p>The type of the entity to be initialized shall be an array of unknown size or a complete object type that is not a variable length array type. <ins>An array of unknown size shall not be initialized by an empty initializer.</ins></p>
</blockquote>



## Modify Â§6.7.9 paragraph 10 ## {#wording-6.7.9p10}

<blockquote>
<p>
<ins>If an object that has automatic storage duration is initialized with an empty initializer, its value is the same as the initialization of a static storage duration object. Otherwise, if</ins><del>If</del> an object that has automatic storage duration is not initialized explicitly, its value is indeterminate. If an object that has static or thread storage duration is not initialized explicitly<ins>, or is initialized with an empty initializer,</ins>, then: â€¦
</p>
</blockquote>



## OPTIONAL CHANGE 0: Largest-Then-First Initialization - Modify Â§6.7.9 paragraph 10, last bullet point ## {#wording-6.7.9p10-extra}

<blockquote>
<p>
â€¦
<dl>
	<dd><ins>â€” if it is a union and the initializer is the empty initializer, the largest member is initialized (recursively) according to these rules, then the first named member is initialized (recursively) according to these rules, and any padding is initialized to zero bits;</ins></dd>
	<dd>â€” if it is a union <ins>and the initializer is not an empty initializer</ins>, the first named member is initialized (recursively) according to these rules, and any padding is initialized to zero bits;</dd>
</dl>
â€¦
</p>
</blockquote>



## Modify Â§6.7.9 paragraph 11 ## {#wording-6.7.9p11}

<blockquote>
<p>
<del>The initializer for a scalar shall be a single expression, optionally enclosed in braces. The</del><ins>The initializer for a scalar shall be a single expression, optionally enclosed in braces, or it shall be an empty initializer. If the initializer is the empty initializer, the initial value is the same as the initialization of a static storage duration object. Otherwise, </ins>the initial value of the object is that of the expression (after conversion); â€¦
</p>
</blockquote>


## Lift Empty-Initializer for VLAs Restriction ## {#wording-vlas}

### Modify Â§6.7.9 paragraph 3 ### {#wording-vlas-6.7.8p3}

<blockquote>
<p>The type of the entity to be initialized shall be an array of unknown size or a complete object type<del>that is not a variable length array type</del>.<ins> An entity of variable length array type shall not be initialized except by an empty initializer.</ins></p>
</blockquote>




# Acknowledgements # {#acknowledgements}

Thank you to the C community for the push to write this paper! Thank you to Joseph Myers, Hubert Tong, and Martin Uecker for wording improvements and suggestions.




# Appendix # {#appendix}

The appendix is a collection of historical references to old paper material or points that are potentially relevant but ultimately not required for understanding the full motivation and wording of the proposal.

## Decimal Floating Point ## {#appendix-dfp}

Originally, this section in a previous revision of the paper was concerned about Decimal Floating Point initialization. But, this was clarified as a bug / potentially wrong interaction and a paper was brought forward to fix it, which has already been voted into the C Standard. The old text is reproduced for historical reasons, just below:

> Decimal Floating Point (DFP) do not use the exact same semantics between `{ 0 }` and `{ }`. In particular, `{ }` is a "more strict" version of initialization that writes all bits to 0. In contrast, `{ 0 }` produces a "fuzzy" zero value that includes setting the nominal value to 0 along with a quantum exponent of 0 (which may not be represented perfectly by all bits 0).
> 
> This is taken care of with additional wording that highlights the proper behavior for scalars types (which DFP types are considered) for `{ }`, which makes it clear it is initialized properly to a `0` value.


## Compiler Extensions + Union Aliasing ## {#appendix-clang}

Some compilers such as Clang have special compilation modes where they can write bits not equivalent to the "static storage duration initialization" of a type when, such as `-ftrivial-auto-var-init=pattern`. This creates a difference between what `{ 0 }` and what `{ }` do in those modes. For example, consider the following code:

```cpp
struct A {
  union {
    char x;
    char y[1024];
  } u;
};

void foo();
int main(void) {
  struct A a = { 0 };
  if (a.u.y[1023]) {
    foo();
  }
}
```

Without compiler options which change unspecified / indeterminate initialization pattern, Clang will trivially-initialize the union of `y` with `0`, because the values of `y` in `a.u` are unspecified. With `-ftrivial-auto-var-init=pattern` or other non-zero initializer options, these unspecified values become non-zero values and result in `foo()` being called. Nominally, reading values from a union is unspecified behavior, so on one hand we can simply handwave this away as "who cares?". Indeed, the Standard cannot specify unspecified behavior, even if it is technically legal to read values from `y` despite never being written to (it is not explicitly undefined behavior or a constraint violation, just unspecified).

On the other hand, we have a noticeable difference here:

```cpp
struct A {
  union {
    char x;
    char y[1024];
  } u;
};

void foo();
int main(void) {
  struct A a = { };
  if (a.u.y[1023]) {
    foo();
  }
}
```

Using this initialization syntax, even with different `ftrivial-auto-var-init={whatever}` flags, the behavior is stable: the **entire** union is zero-written. In this case, `foo()` is never called. This proposal's previous iterations replicated this behavior, as it was thought to provide better reliability and security semantics. Note that a user can always fall back to using `= { 0 }` if leaving other non-overlapping values in a union is desirable. This does mean that one can, technically, tell if something was initialized with either `= { 0 }` or `= { }`, which somewhat contradicts the premise of the paper (that `= { 0 }` and `= { }` are identical).

Ultimately, the Committee was not in favor of the largest-member-initialized behavior for an empty initializer `{ }`.



<pre class=biblio>
{
	"zcash-warning-disable": {
		"authors": [
			"yaahc",
			"zcash Foundation"
		],
		"title": "Disable Missing Initializer Warnings",
		"href": "https://github.com/ZcashFoundation/zcash_script/pull/17/commits/d8e6e1815bac91eef8134d1b79223c15241cd4ec#diff-d0d98998092552a1d3259338c2c71e118a5b8343dd4703c0c7f552ada7f9cb42R84",
		"date": "February 18th, 2021"
	},
	"N2731": {
		"authors": [
			"ISO/IEC JTC1 SC22 WG14 - Programming Languages, C",
			"JeanHeyd Meneide",
			"Freek Wiedijk"
		],
		"title": "N2731: ISO/IEC 9899:202x - Programming Languages, C",
		"href": "https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf",
		"date": "October 18th, 2021"
	}
}
</pre>
