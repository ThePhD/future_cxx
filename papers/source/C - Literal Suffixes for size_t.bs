<pre class='metadata'>
Title: Literal Suffixes for size_t
Shortname: 2961
Revision: 0
Status: P
Date: 2022-04-12
Group: WG14
!Proposal Category: Feature Request
!Target: C2Y/C3X
Editor: JeanHeyd Meneide (thephd.dev), phdofthehouse@gmail.com
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Literal%20Suffixes%20for%20size_t.html
!Latest: <a href="https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Literal%20Suffixes%20for%20size_t.html">https://thephd.dev/_vendor/future_cxx/papers/C - Literal Suffixes for size_t.html</a>
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/source/C%20-%20Literal%20Suffixes%20for%20size_t.bs">github.com/ThePhD/future_cxx</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, Latest, Paper Source,Issue Tracking, Proposal Category, Target, Project
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: C++ has suffixed literals for size_t and its signed counterpart. This paper gives C the same ability.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>




# Changelog # {#changelog}



## Revision 0 - April 12<sup>th</sup>, 2022 ## {#changelog-r0}

- Initial Release ðŸŽ‰
- Targeting C2Y/C3X (after C23).




# Design # {#design}

This is a (minor) compatibility issue with literal suffixes that may be potentially used in shared code in the future. C++ adopted suffixed literals for size_t in [[p0330]]. The design is as follows:

```cpp
#include <stddef.h>

size_t ulit_val = 0zu;
```

The `u`, as with current literals, can be placed on either the left or the right of the `z` suffix to make it unsigned. For symmetry with existing suffix literal rules, it also has a signed variant. That type is the "signed integer type of size_t", which normally resolves to `ptrdiff_t`:

```cpp
#include <stddef.h>

ptrdiff_t lit_val = 0z;
```

The signed variant lacks the `u` as a piece of the `z` suffix. This also matches the way `printf` adjusts specific codes to display `size_t` or `ptrdiff_t`-sized variables. The design is simple and, thankfully, compatible with C++. It also provides a way to avoid signed comparison warnings in compilers which implement more strict comparisons checks, e.g., when comparing a `size_t` value against some fixed constant value.


## Even After Compatibility, Do We Really Need This? ## {#design-really}

Yes. The trip to put this paper into C++ was an extremely long one and came with a ton of reasons. All of it can be seen in [[p0330]] and 90% of that reasoning applies to C, especially in the face of `_Generic`.



# Wording # {#wording}

Wording is relative to [[N2731]].



## Intent ## {#wording-intent}

The goal of this wording is to provide:

- a literal suffix for both the signed (`ptrdiff_t`) or unsigned (`size_t`) variant of the type of the expression "`sizeof(0)`"; and,
- use the suffix `z` in either the form `uz` or `zu` to produce a `size_t`.



## Specification ## {#wording-specification}


### Add two new grammar productions to Â§6.4.4.1 Integer constantsÂ¸ Syntax, Â¶1 ### {#wording-specification-6.4.4.1p1}

<blockquote>
<div class="wording-section">
<div class="wording-clause-header">
<span class="wording-clause-number">6.4.4.1</span> <span class="wording-clause-title">Integer constants</span>
</div>

<div class="wording-clause-section-title">
Syntax
</div>

<div class="wording-numbered">

â€¦

<dl>
	<dd><i>integer-suffix:</i>
	<dl>
		<dd><i>unsigned-suffix</i> <i>long-suffix<sub>opt</sub></i></dd>
		<dd><i>unsigned-suffix</i> <i>long-long-suffix</i></dd>
		<dd><ins><i>unsigned-suffix</i> <i>size-suffix</i></ins></dd>
		<dd><i>long-suffix</i> <i>unsigned-suffix<sub>opt</sub></i></dd>
		<dd><i>long-long-suffix</i> <i>unsigned-suffix<sub>opt</sub></i></dd>
		<dd><ins><i>size-suffix</i> <i>unsigned-suffix<sub>opt</sub></i></ins></dd>
	</dl>
	</dd>
</dl>

â€¦

<dl>
	<dd><i>long-long-suffix:</i> one of
	<dl>
		<dd>**ll** **LL**</dd>
	</dl>
	</dd>
	<dd><ins><i>size-suffix:</i> one of
	<dl>
		<dd>**z** **Z**</dd>
	</dl>
	</ins></dd>
</dl>
</div>
</div>
</blockquote>


### Add two new table rows to Â§6.4.4.1 Integer constantsÂ¸ Semantics, Â¶6; Modify Â¶7 ### {#wording-specification-6.4.4.1p6}

<blockquote>
<div class="wording-section">
<div class="wording-numbered wording-numbered-6">
The type of an integer constant is the first of the corresponding list in which its value can be
represented.

<table>
	<tr>
		<th>Suffix</th>
		<th>Decimal Constant</th>
		<th>Octal, Binary, or Hexadecimal Constant</th>
	</tr>
	<tr>
		<td>â€¦</td>
		<td>â€¦</td>
		<td>â€¦</td>
	</tr>
	<tr><ins>
		<td><ins>**z** or **Z**</ins></td>
		<td><ins>the corresponding signed integer type of the expression `sizeof(0)`'s type (6.5.3.4)</ins></td>
		<td><ins>the corresponding signed integer type of the expression `sizeof(0)`'s type</ins></td>
	</ins></tr>
	<tr>
		<td><ins>Both **U** or **U** and **z** or **Z**</ins></td>
		<td><ins>the same type as the expression `sizeof(0)`</ins></td>
		<td><ins>the same type as the expression `sizeof(0)`</ins></td>
	</tr>
</table>

<div class="wording-numbered">

If an integer constant cannot be represented by any type in its list, it may have an extended integer type, if the extended integer type can represent its value. If all of the types in the list for the constant are signed, the extended integer type shall be signed. If all of the types in the list for the constant are unsigned, the extended integer type shall be unsigned. If the list contains both signed and unsigned types, the extended integer type may be signed or unsigned. If an integer constant cannot be represented by any type in its list and has no extended integer type, then the integer constant has no type. <ins>Additionally, if an integer constant with the suffixes **z**, **uz**, **zu**,  **Z**, **UZ**, or **ZU** cannot be represented by any type in its list, then the integer constant has no type.</ins>
</div>

<div class="wording-numbered">
<ins>


</ins>
</div>

<div>
Forward references: preprocessing numbers (6.4.8), numeric conversion functions (7.22.1)<ins>, The **sizeof** and **_Alignof** operators (6.5.3.4)</ins>.
</div>
</blockquote>



<pre class="biblio">
{
	"p0330": {
		"authors": [
			"JeanHeyd Meneide",
			"Rein Halbersma"
		],
		"title": "Literal Suffixes for ptrdiff_t and size_t",
		"href": "https://wg21.link/p0330",
		"date": "November 4th, 2019"
	},
	"N2731": {
		"authors": [
			"JeanHeyd Meneide",
			"Freek Wiedijk"
		],
		"title": "ISO/IEC 9899 Programming Languages C - Working Draft",
		"href": "http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf",
		"date": "October 18th, 2021"
	}
}
</pre>
