<pre class='metadata'>
Title: Literal Suffixes for size_t
Shortname: 29XX
Revision: 0
Status: P
Date: 2021-01-01
Group: WG14
!Proposal Category: Feature Request
!Target: General Developers, Post-C23 Developers
Editor: JeanHeyd Meneide (thephd.dev), phdofthehouse@gmail.com
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Literal%20Suffixes%20for%20size_t.html.html
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/source/C%20-%20Literal%20Suffixes%20for%20size_t.html.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, This Version, Paper Source, Implementation, Issue Tracking, Project, Audience, Proposal Category, Target
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: C++ has suffixed literals for size_t and its signed counterpart. This paper gives C the same ability.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>




# Changelog # {#changelog}



## Revision 0 - January 1<sup>st</sup>, 2022 ## {#changelog-r0}

â€” Initial Release ðŸŽ‰
- Targeting Post-C23.




# Design # {#design}

This is a (minor) compatibility issue with literal suffixes that may be potentially used in shared code in the future. C++ adopted suffixed literals for size_t in [[p0330]]. The design is as follows:

```cpp
#include <stddef.h>

size_t ulit_val = 0zu;
```

The `u`, as with current literals, can be placed on either the left or the right of the `z` suffix to make it unsigned. For symmetry with existing suffix literal rules, it also has a signed variant. That type is the "signed integer type of size_t", which normally resolves to `ptrdiff_t`:

```cpp
#include <stddef.h>

ptrdiff_t lit_val = 0z;
```

The signed variant lacks the `u` as a piece of the `z` suffix. This also matches the way `printf` adjusts specific codes to display `size_t` or `ptrdiff_t`-sized variables. The design is simple and, thankfully, compatible with C++. It also provides a way to avoid signed comparison warnings in compilers which implement more strict comparisons checks, e.g., when comparing a `size_t` value against some fixed constant value.




# Wording # {#wording}

Wording is relative to [[N2731]].

## Intent ## {#wording-intent}

The goal of this wording is to provide:

- a literal suffix for both the signed (`ptrdiff_t`) or unsigned (`size_t`) variant of the type of the expression "`sizeof(0)`"; and,
- use the suffix `z` in either the form `uz` or `zu` to produce a `size_t`.



## Specification ## {#wording-specification}


### Add two new grammar productions to Â§6.4.4.1 Integer constantsÂ¸ Syntax, Â¶1 ### {#wording-specification-6.4.4.1p1}

<blockquote>
<div class="wording-section">
<b>6.4.4.1 Integer constants</b>
<b>Syntax</b>
<div class="wording-numbered">

â€¦

<dl>
	<dd><i>integer-suffix:</i>
	<dl>
		<dd><i>unsigned-suffix</i> <i>long-suffix<sub>opt</sub></i></dd>
		<dd><i>unsigned-suffix</i> <i>long-long-suffix</i></dd>
		<dd><ins><i>unsigned-suffix</i> <i>size-suffix</i></ins></dd>
		<dd><i>long-suffix</i> <i>unsigned-suffix<sub>opt</sub></i></dd>
		<dd><i>long-long-suffix</i> <i>unsigned-suffix<sub>opt</sub></i></dd>
		<dd><ins><i>size-suffix</i> <i>unsigned-suffix<sub>opt</sub></i></ins></dd>
	</dl>
	</dd>
</dl>

â€¦

<dl>
	<dd><i>long-long-suffix:</i> one of
	<dl>
		<dd><b>ll</b> <b>LL</b></dd>
	</dl>
	</dd>
	<dd><ins><i>size-suffix:</i> one of
	<dl>
		<dd><b>z</b> <b>Z</b></dd>
	</dl>
	</ins></dd>
</dl>
</div>
</div>
</blockquote>


### Add two new table rows to Â§6.4.4.1 Integer constantsÂ¸ Semantics, Â¶6 ### {#wording-specification-6.4.4.1p6}

<blockquote>
<div class="wording-section">
<table>
	<tr>
		<th>Suffix</th>
		<th>Decimal Constant</th>
		<th>Octal, Binary, or Hexadecimal Constant</th>
	</tr>
	<tr>
		<td>â€¦</td>
		<td>â€¦</td>
		<td>â€¦</td>
	</tr>
	<tr><ins>
		<td><ins><b>z</b> or <b>Z</b></ins></td>
		<td><ins>the corresponding signed integer type of the expression `sizeof(0)`'s type (6.5.3.4)</ins></td>
		<td><ins>the corresponding signed integer type of the expression `sizeof(0)`'s type</ins></td>
	</ins></tr>
	<tr>
		<td><ins>Both <b>U</b> or <b>U</b> and <b>z</b> or <b>Z</b></ins></td>
		<td><ins>the same type as the expression `sizeof(0)`</ins></td>
		<td><ins>the same type as the expression `sizeof(0)`</ins></td>
	</tr>
</table>
</div>

<p>â€¦</p>

<p>Forward references: preprocessing numbers (6.4.8), numeric conversion functions (7.22.1)<ins>, The <b>sizeof</b> and <b>_Alignof</b> operators (6.5.3.4)</ins>.</p>
</blockquote>



<pre class="biblio">
{
	"p0330": {
		"authors": [
			"JeanHeyd Meneide",
			"Rein Halbersma"
		],
		"title": "Literal Suffixes for ptrdiff_t and size_t",
		"href": "https://wg21.link/p0330",
		"date": "November 4th, 2019"
	},
	"N2731": {
		"authors": [
			"JeanHeyd Meneide",
			"Freek Wiedijk"
		],
		"title": "ISO/IEC 9899 Programming Languages C - Working Draft",
		"href": "http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf",
		"date": "October 18th, 2021"
	}
}
</pre>
