<pre class='metadata'>
Title: Endian and Byteswap
Shortname: 28XX
Revision: 0
!Previous Revisions: None
Status: P
Date: 2021-10-15
Group: WG14
!Proposal Category: Change Request
!Target: General Developers
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Endian.html
!Paper Source: <a href="https://github.com/ThePhD/future_cxx/tree/main/papers/source/C%20-%20Endian.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, This Version, Paper Source, Implementation, Issue Tracking, Project, Audience, Proposal Category, Target
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: Endian preprocessor and enumeration directives, alongside byte swapping and big endian / little endian functions.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>


# Changelog # {#changelog}



## Revision 0 - October 15th, 2021 ## {#changelog-r0}

- Initial release. âœ¨




# Introduction & Motivation # {#motivation}

There is a lot of proposals and work that goes into figuring out the "byte order" of integer values that occupy more than 1 octet (8 bits). This is nominally important when dealing with data that comes over network interfaces and is read from files, where the data can be laid out in various orders of octets for 2-, 3-, 4-, 6-, or 8-tuples of octets. The most well-known endian structures on existing architectures include "Big Endian", where the least significant bit comes "first" and is featured prominently in network protocols and file protocols; and, "Little Endian", where the least significant bit comes "last" and is typically the orientation of data for processor and user architectures most prevalent today.

In more legacy architectures (Honeywell, PDP), there also exists other orientations called "mixed" or "middle" endian. The uses of such endianness are of dubious benefit and are vanishingly rare amongst commodity and readily available hardware today, but nevertheless still represent an applicable ordering of octets.

In other related programming interfaces, the C functions/macros `ntoh` ("network to host") and `hton` ("host to network") (usually suffixed with `l` or `ul` or others to specify which native data type it was being performed on such as `long`) were used to change the byte order of a value and returned that value. This became such a common operation that many compilers - among them Clang and GCC - optimized the code down to use an intrinsic `__builtin_bytewap(...)`/`__builtin_bswap(...)` ([[msvc-builtins|for MSVC]], [[clang-builtins|for Clang]], and [[gcc-builtins|for GCC]]). These intrinsics often compiled into binary code representing cheap, simple, and fast byte swapping instructions available on many CPUs for 16, 32, 64, and sometimes 128 bit numbers. The `bswap`/`byteswap` intrinsics were used as the fundamental underpinning for the `ntoh` and `hton` functions, where a check for the translation-time endianness of the program determined if the byte order would be flipped or not.

This proposal puts forth the fundamentals that make a homegrown implementation of `htonl`, `ntoh`, and other endianness-based functions possible in Standard C code.




# Design # {#design}

This is a library addition. It is meant to expose both macros and enumeration values that can be used for both translation-time checks and for execution-time runs. It provides a way to check if the endianness within the preprocessor, and gives definitive names that allow for knowing whether the endianness is big, little, or neither. We state big, little, or neither, because there is no settled-upon name for the legacy endianness of "middle" or "mixed", nor any agreed upon ordering for such a "middle" or "mixed" endianness between architectures. This is not the case for big endian or little endian, where one is simply the reverse of the other, always, in every case, across architectures, file protocols, and network specifications.



## The Endianness Enumeration ## {#design-enum}

The enumeration is specified as follows:

```cpp
#include <stdendian.h>

#define __STDC_ENDIAN_LITTLE__ 1 /* some unique value */
#define __STDC_ENDIAN_BIG__ 2 /* some other unique value */
#define __STDC_ENDIAN_NATIVE__ see-below

typedef enum stdc_endian {
	stdc_endian_little = STDC_ENDIAN_LITTLE,
	stdc_endian_big = STDC_ENDIAN_BIG,
	stdc_endian_native = STDC_ENDIAN_NATIVE
} stdc_endian;
```

The goal of this enumeration is that if the system identifies as a "little endian" system, then `__STDC_ENDIAN_LITTLE__ == __STDC_ENDIAN_NATIVE__`, and that is how an end-user knows that the implementation is little endian. Similarly, a user can check `__STDC_ENDIAN_BIG__ == __STDC_ENDIAN_NATIVE__`, and they can know the implementation is big endian. Finally, if the system is neither big nor little endian, than `__STDC_ENDIAN_NATIVE__` is a unique value that does not compare equal to either value:


```cpp
#include <stdendian.h>
#include <stdio.h>

int main () {
	if (stdc_endian_native == stdc_endian_little) {
		printf("little endian! uwu\n");
	}
	else if (stdc_endian_native == stdc_endian_big) {
		printf("big endian OwO!\n");
	}
	else {
		printf("what is this?!\n");
	}
	return 0;
}
```

If a user has a Honeywell architecture or a PDP architecture, it is up to them to figure out which flavor of "middle endian"/"mixed endian"/"bi endian" they are utilizing. We do not give these a name in the enumeration because neither the Honeywell or PDP communities ever figured out which flavor of the 32-bit byte order of `2341`/`3412`/`2143`/etc. was strongly assigned to which name ("mixed" endian? "mixed-big" endian? "bi-little" endian?), and since this is not a settled matter in existing practice we do not provide a name for it in the C Standard. It is also of dubious determination what the byte order for a 3-byte, 5-byte, 6-byte, or 7-byte integer is in these mixed-endian types, whereas both big and little have dependable orderings.



## Hey! Some Architectures Can Change Their Endianness at Run-time! ## {#design-run.time}

This is beyond the scope of this proposal. This is meant to capture the translation-time endianness. There also does not appear to be any operating system written today that can tolerate an endianness change happening arbitrarily at runtime, after a program has launched. This means that the property is effectively a translation-time property, and therefore can be exposed as a compile-time constant. A future proposal to determine the run-time byte order is more than welcome from someone who has suitable experience dealing with such architectures and programs, and this proposal does not preclude their ability to provide such a run-time function e.g. `stdc_endian get_execution_endian(void);`.


## Generic Byte Swap and Exact-width Byte Swap ## {#design-byteswap}

In order to accommodate both a wide variety of architectures but also support exact-width integer optimized intrinsics, this proposal takes from the industry 2 forms of byteswap:

- one generic one which takes a pointer and the number of bytes to perform a reverse operation; and,
- a sequence of exact-width byte swapping instructions which map directly to intrinsics available in compilers and instructions in hardware.

These end up inhabiting a different header - the `stdbit.h` header - and have the following interface:

```cpp
#include <stdbit.h>

void stdc_byteswap(void* ptr, size_t n);
void stdc_byteswapN(uintN_t value);
```

where `N` is one of the exact-width integer types such as `8`, `24`, `16`, `32`, `64`, `128`, and others. This matches the builtins ([[msvc-builtins|MSVC]], [[clang-builtins|Clang]], [[gcc-builtins|GCC]]) and the result of compiler optimizations that produce instructions for many existing architectures as shown in the README of [[portable-endianness|this portable endianness function implementation]].


### But Byte Swap Is Dangerous? ### {#design-byteswap-danger}

Byte swapping, by itself, is absolutely dangerous in terms of code portability. Users often program strictly for their own architecture when doing serialization, and do not take into consideration that their endianness can change. This means that, while `byteswap` functions can compile down to intrinsics, those intrinsics get employed to change "little endian" to "big endian" without performing the necessary check "am I already in the right endianness" check. Values that are *already* in the proper byte order for their target serialization get swapped, resulting in an incorrect byte order for the target network protocol, file format, or other binary serialization target.

The inclusion of the `<stdendian.h>` header reduces this problem, but does not fully eliminate it. This is why many Linux and BSDs include functions which directly transcribe from one endianness to another. This is why the [[endian-fallacy|Byte Order Fallacy]] has spread so far in Systems Programming communities, and why many create their own versions of this both in official widespread vendor code ([[linux-endian]]) and in more personal code used for specific distributions ([[portable-endianness]]).


### Selecting Endianness Functions ### {#design-byteswap-endianness}

Functions meant to transport bytes to a specific endianness need 2 pieces of information:

- the byte order of the input; and,
- the desired byte order of the output.

To represent any operation that goes from/to the byte order that things like `long long`s are kept in, the Linux/BSD/etc. APIs use the term "host", represented by `h`. Every other operation is represented by explicitly naming it, particularly as `be` or `le` for "big endian" or "little endian". Again, because of the severe confusion that comes from what the exact byte order a "mixed endian" multi byte scalar is meant to be in, there seems not to exist any widely available practice regarding what to call a PDP/Honeywell endian configuration. Therefore, mixed/bi/middle-endian is not included in this proposal. It can be added at a later date if the community ever settles on a well-defined naming convention that can be shared between codebases, standards, and industries.

The specification for the endianness functions borrows from many different sources listed above, and is as follows:

```cpp
#include <stdbit.h>

void stdc_store_leN(uintN_t value, void* ptr);
uintN_t stdc_load_leN(void* ptr);

void stdc_store_beN(uintN_t value, void* ptr);
uintN_t stdc_load_beN(void* ptr);
```

Note that this specification only exists for `N` types, similarly to the `stdc_byteswapN` functions. This is because the endianness need only be well-defined for exact-width types that contain no padding. Every other integer type in the C Standard does not have to be the advertised size, nor does it have to have no padding bits. This is unfortunate, but the only way we can preserve portable behavior amongst programs. The ultimate goal of these functions is portable behavior across implementations. Those relying on implementation-specific magic can continue to do so; this just makes a (very large) portion of serialization and deserialization work much more accessible and standard, without the risk of forgetting to properly check endianness. These functions do, of course, take into account the execution environment's endianness, and therefore are suitable for the task at hand. This includes serializing bytes into `ptr` without first doing a byteswap when the endianness of `value` and the specified `be`/`le` endianness match.



# Committee Polls / Questions # {#questions}

For the Committee, this proposal is, effectively, three parts:

1. the `<stdendian.h>` header;
2. the `<stdbit.h>` header and the `byteswap` functions (generic and width-specific); and,
3. the `<stdbit.h>` header and the `load`/`store`, width-specific functions.

These can be polled together or separately, depending on what the Committee desires. It is the author's recommendation that all are adopted to make serialization work with scalars much simpler and easier.




# Wording # {#wording}

The following wording is [[n2596|relative to N2596]].





## Add `<stdendian.h>` and `<stdbit.h>` to freestanding headers in Â§4, paragraph 6 ## {#wording-4p6}

<blockquote>

A conforming freestanding implementation shall accept any strictly conforming program in which the use of the features specified in the library clause (Clause 7) is confined to the contents of the standard headers `<float.h>`,
`<iso646.h>`, `<limits.h>`, `<stdalign.h>`, `<stdarg.h>`, `<stdbool.h>`, `<stddef.h>`, `<stdint.h>`,<ins> `<stdendian.h>`, `<stdbit.h>`,</ins> and `<stdnoreturn.h>`

</blockquote>



## Add a new Â§7.3ï¿½x sub-clause for "Endian" in Â§7 ## {#wording-7.3ï¿½x}

<blockquote>
<ins>
<div class="wording-section">

<p><b>7.3ï¿½x Endian</b/</p>

<div class="wording-numbered">
The header `<stdendian.h>` defines the following macros, declares the following types, declares the following functions, and defines the following enumeration constants for determining the method of byte ordering used in multi-byte scalar types. Two common methods of byte ordering in multi-byte scalar types are <b>big-endian</b> and <b>little-endian</b>. Big-endian is a format for storage of binary data in which the most significant byte is placed first, with the rest in descending order. Little-endian is a format for storage or transmission of binary data in which the least significant byte is placed first, with the rest in ascending order. This clause describes the endianness of the execution environment.
</div>

<div class="wording-numbered">
The macros are:

> ```cpp
> __STDC_ENDIAN_LITTLE__
> ```

which represents a method of byte order storage least significant byte is placed first, and the rest are in ascending order is suitable for use in an `#if` preprocessing directive;

> ```cpp
> __STDC_ENDIAN_BIG__
> ```

which represents a method of byte order storage most significant byte is placed first, and the rest are in descending order is suitable for use in an `#if` preprocessing directive;

> ```cpp
> __STDC_ENDIAN_NATIVE__
> ```

which represents the method of byte order storage for the execution environment and is suitable for use in an `#if` preprocessing directive.
</div>

<div class="wording-numbered">

`__STDC_ENDIAN_NATIVE__` shall be identical to `__STDC_ENDIAN_LITTLE__` if the execution environment is little-endian. Otherwise, `__STDC_ENDIAN_NATIVE__` shall be identical to `__STDC_ENDIAN_BIG__` if the execution environment is big-endian. If `__STDC_ENDIAN_NATIVE__` is not equivalent to either, then the byte order for the execution environment is implementation-defined.
</div>

<div class="wording-numbered">
The enumeration type is

> ```cpp
> stdc_endian
> ```

whose corresponding enumeration constants are listed below.
</div>

<div class="wording-numbered">
The enumeration constants are:

> ```cpp
> stdc_endian_little = __STDC_ENDIAN_LITTLE__
> ```

which represents a method of byte order storage least significant byte is placed first, and the rest are in ascending order;

> ```cpp
> stdc_endian_big = __STDC_ENDIAN_BIG__
> ```

which represents a method of byte order storage most significant byte is placed first, and the rest are in descending order; and,

> ```cpp
> stdc_endian_native = __STDC_ENDIAN_NATIVE__
> ```

which represents the method of byte order storage for the execution environment.<sup>FOOTNOTEï¿½0)</sup>
</div>

<sup>FOOTNOTEï¿½0)</sup><sub>Comparing the enumeration constants by `stdc_endian_native == stdc_endian_little` or `stdc_endian_native == stdc_endian_big` is the same as checking the macros for whether or not the execution environment is big-endian, little-endian, or neither.</sub>
</div>
</div>
</ins>
</blockquote>



## Add a new Â§7.3ï¿½y sub-clause for "Bit Utilities" in Â§7 ## {#wording-7.3ï¿½y}

<blockquote>
<ins>

<p><b>7.3ï¿½y Bit Utilities</b/</p>

<p><b>7.3ï¿½y.1 Byte Swap</b/</p>
<div class="wording-section">

<p><b>Synopsis</b/</p>
<div class="wording-numbered">

> ```cpp
> #include <stdbit.h>
> void stdc_byteswap(void* ptr, size_t n);
> ```
</div>

<p><b>Description</b/</p>
<div class="wording-numbered">

The `stdc_byteswap` function provides an interface to reverse the order of a given sequence of bytes. If `n` is less than or equal to `1`, then the function has no effect. Otherwise, let `R` represent the byte sequence represented by `ptr` and `n` in reverse order. Each byte's value is exchanged with the value in its corresponding reverse position in `R`.
</div>
</div>

<p><b>7.3ï¿½y.2 Exact-width Byte Swap</b/</p>
<div class="wording-section">

<p><b>Synopsis</b/</p>
<div class="wording-numbered">

> ```cpp
> #include <stdbit.h>
> uintN_t stdc_byteswapN(uintN_t value);
> ```
</div>

<p><b>Description</b/</p>
<div class="wording-numbered">

The <code>stdc_byteswap<i>N</i></code> functions provide an interface to swap the bytes of a corresponding <code>uint<i>N</i>_t</code> object, where <i>N</i> matches an existing exact-width integer type (7.20.1.1). These functions are optional. However, if an implementation provides the corresponding <code>uint<i>N</i>_t</code> typedef (7.20.1.1), it shall define the corresponding exact-width byte swap functions.
</div>

<p><b>Returns</b/</p>
<div class="wording-numbered">

Returns a byte swapped <code>uint<i>N</i>_t</code> value.
</div>
</div>

<p><b>7.3ï¿½y.2 Exact-width Endian-Aware Load</b/</p>
<div class="wording-section">

<p><b>Synopsis</b/</p>
<div class="wording-numbered">

> ```cpp
> #include <stdbit.h>
> uintN_t stdc_load_leN(void* ptr);
> uintN_t stdc_load_beN(void* ptr);
> ```
</div>

<p><b>Description</b/</p>
<div class="wording-numbered">

The <code>stdc_load_le<i>N</i></code> and <code>stdc_load_be<i>N</i></code> functions return a <code>uint<i>N</i>_t</code> object by loading bytes from `ptr` in an endian-aware (7.3ï¿½x) manner, where <i>N</i> matches an existing exact-width integer type (7.20.1.1). The `le` stands for little-endian and the `be` stands for big-endian. These functions are optional. However, if an implementation provides the corresponding <code>uint<i>N</i>_t</code> typedef (7.20.1.1), it shall define the corresponding exact-width endian-aware load functions.
</div>

<p><b>Returns</b/</p>
<div class="wording-numbered">

Let `B` be the sequence of bytes in ascending memory order from `ptr`, with a sequence length `L` of `N / CHAR_BIT`. If `stdc_endian_native` is equivalent to `stdc_endian_little`, then:
<dl>
	<dd>â€” if the function is `le`, then a <code>uint<i>N></i>_t</code> is returned whose bytes are identical to the sequence of `B`; otherwise,</dd>
	<dd>â€” if the function is `be`, then a <code>uint<i>N></i>_t</code> is returned whose bytes are in reverse order to the sequence of `B`.</dd>
</dl>

Otherwise, if `stdc_endian_native` is equivalent to `stdc_endian_big`, then:
<dl>
	<dd></dd>
	<dd>â€” if the function is `le`, then a <code>uint<i>N></i>_t</code> is returned whose bytes are in reverse order to the sequence of `B`; otherwise,</dd>
	<dd>â€” if the function is `be`, then a <code>uint<i>N></i>_t</code> is returned whose bytes are identical to the sequence of `B`.</dd>
</dl>

Otherwise, if `stdc_endian_native` is equivalent to `stdc_endian_little`, then the result is implementation-defined<sup>FOOTNOTEï¿½1)</sup>.
</div>
<p><sup>FOOTNOTEï¿½1)</sup><sub>Using the returned value in the Endian-Aware Store function (7.3ï¿½y.3) should produce an identical byte sequence to `ptr`.</sub></p>
<p><b>7.3ï¿½y.3 Exact-width Endian-Aware Store</b/</p>
<div class="wording-section">

<p><b>Synopsis</b/</p>
<div class="wording-numbered">

> ```cpp
> #include <stdbit.h>
> void stdc_store_leN(uintN_t value, void* ptr);
> void stdc_store_beN(uintN_t value, void* ptr);
> ```
</div>

<p><b>Description</b/</p>
<div class="wording-numbered">

The <code>stdc_store_le<i>N</i></code> and <code>stdc_store_be<i>N</i></code> functions copy the bytes of an <code>uint<i>N</i>_t</code> object to `ptr` in an endian-aware (7.3ï¿½x) manner, where <i>N</i> matches an existing exact-width integer type (7.20.1.1). The `le` stands for little-endian and the `be` stands for big-endian. These functions are optional. However, if an implementation provides the corresponding <code>uint<i>N</i>_t</code> typedef (7.20.1.1), it shall define the corresponding exact-width endian-aware load functions.
</div>

<p><b>Returns</b/</p>
<div class="wording-numbered">

Let `P` be the sequence of bytes in ascending memory order from `&value`, with a sequence length `L` of `N / CHAR_BIT`. Let `B` be `ptr` with a sequence length of `L`. If `stdc_endian_native` is equivalent to `stdc_endian_little`, then:
<dl>
	<dd>â€” if the function is `le`, then exactly `L` bytes are stored in `B` from `P` such that the sequences are identical; otherwise,</dd>
	<dd>â€” if the function is `be`, then exactly `L` bytes are stored in `B` from `P` such that the sequences are in reverse order.</dd>
</dl>

Otherwise, if `stdc_endian_native` is equivalent to `stdc_endian_big`, then:
<dl>
	<dd>â€” if the function is `le`, then exactly `L` bytes are stored in `B` from `P` such that the sequences are in reverse order; otherwise,</dd>
	<dd>â€” if the function is `be`, then exactly `L` bytes are stored in `B` from `P` such that the sequences are identical.</dd>
</dl>

Otherwise, if `stdc_endian_native` is equivalent to `stdc_endian_little`, then exactly `L` bytes are stored in an implementation-defined manner such that `B` represents a little-endian or big-endian byte order appropriate for the given exact-width integer `N`<sup>FOOTNOTEï¿½2)</sup>.
</div>
</div>

<p><sup>FOOTNOTEï¿½2)</sup><sub>The effect on the byte sequence pointed to by `ptr` should cause the Endian-Aware Load function (7.3ï¿½y.2) to produce an equivalent object to `value` when given `ptr` as input.</sub></p>
</ins>
</blockquote>

## Add three new entries for Implementation-defined behavior in Annex J.3 ## {#wording-annexj.3}

<blockquote>
<p><ins>â€” The value of `stdc_endian_native` and `__STDC_ENDIAN_NATIVE__` if the execution environment is not big-endian or little-endian (7.3ï¿½x).</ins></p>

<p><ins>â€” The return value of the Endian-Aware Load functions (7.3ï¿½y.2) if the execution environment is not big-endian or little endian (7.3ï¿½x).</ins></p>

<p><ins>â€” The value of the byte sequence stored by the Endian-Aware Store functions (7.3ï¿½y.3) if the execution environment is not big-endian or little endian (7.3ï¿½x).</ins></p>
</blockquote>

<pre class="biblio">
{
	"N2596": {
		"authors": [
			"ISO/IEC JTC1 SC22 WG14 - Programming Languages, C",
			"JeanHeyd Meneide",
			"Freek Wiedijk"
		],
		"title": "N2596: ISO/IEC 9899:202x - Programming Languages, C",
		"href": "http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2596.pdf",
		"date": "December 11th, 2020"
	},
	"gcc-builtins": {
		"authors": [
			"GCC Contributors"
		],
		"title": "Other Built-in Functions Provided by GCC",
		"publisher": "GCC",
		"href": "https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html",
		"date": "September 1st, 2021"
	},
	"msvc-builtins": {
		"authors": [
			"Microsoft"
		],
		"title": "_byteswap_uint64, _byteswap_ulong, _byteswap_ushort",
		"publisher": "Microsoft",
		"href": "https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/byteswap-uint64-byteswap-ulong-byteswap-ushort?view=msvc-160",
		"date": "November 4th, 2016"
	},
	"clang-builtins": {
		"authors": [
			"LLVM Foundation",
			"Clang Contributors"
		],
		"title": "Clang Language Extensions: Clang Documentation",
		"publisher": "LLVM Foundation",
		"href": "https://clang.llvm.org/docs/LanguageExtensions.html#intrinsics-support-within-constant-expressions",
		"date": "September 1st, 2021"
	},
	"endian-fallacy": {
		"authors": [
			"Rob Pike"
		],
		"title": "The Byte Order Fallacy",
		"href": "https://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html",
		"date": "April 3rd, 2012"
	},
	"portable-endianness": {
		"authors": [
			"David Seifert"
		],
		"title": "portable-endianness",
		"publisher": "GitHub",
		"href": "https://github.com/SoapGentoo/portable-endianness",
		"date": "May 16th, 2021"
	},
	"linux-endian": {
		"authors": [
			"Linux",
			"BSD"
		],
		"title": "endian(3)",
		"publisher": "die.net",
		"href": "https://linux.die.net/man/3/endian",
		"date": "September 1st, 2021"
	}
}
</pre>
