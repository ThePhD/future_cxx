<pre class='metadata'>
Title: Unicode Sequences More Than 21 Bits are a Constraint Violation
Shortname: 28XX
Revision: 0
!Previous Revisions: None
Status: P
Date: 2021-10-15
Group: WG14
!Proposal Category: Change Request
!Target: General Developers
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Unicode%20Sequences%20More%20Than%2021%20Bits%20are%20a%20Constraint%20Violation.html
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/source/C%20-%20Unicode%20Sequences%20More%20Than%2021%20Bits%20are%20a%20Constraint%20Violation.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, This Version, Paper Source, Implementation, Issue Tracking, Project, Audience, Proposal Category, Target
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: Unicode escape sequences larger than hexadecimal 10FFFF do not make sense.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>


# Changelog # {#changelog}



## Revision 0 - October 15th, 2021 ## {#changelog-r0}

- Initial release. ✨




# Introduction & Motivation # {#motivation}

What does `u8"\UFFFFFFFF` yield? By strict interpretation of the standard, it produces a 32-bit code point whose value is `0xFFFFFFFF`. But, this code point has no meaning as an ISO/IEC 10646 code point or Universal Character Sequence. The maximum is `0x10FFFF`, and that 21-bit limitation is baked into both ISO/IEC 10646 as well as a required property of Unicode [as part of it's Stability Guarantees](https://www.unicode.org/policies/stability_policy.html#Property_Value).

> The General_Category property value Surrogate (Cs) is immutable: the set of code points with that **value will never change**.

We should make this requirement explicit, rather than have developers maybe-or-maybe-not derive it from the ISO/IEC 10646 definition. Previously, ISO 10646 described, up to the 2003 edition, a complicated scheme that could allow for up to 31 bits of data (which, normally, made the UTF-8 encoding that uses 5 or 6 byte sequences to denote code units beyond 21 bits) legal. Past that version, Unicode has settled on the 21-bit guarantee and put it into its future compatibility promises. It is safe to standardize this because the invariant has been maintained for the past 18 years, and we have not yet nearly exhausted the 21-bit code point space Unicode has allotted for us. (Notably, the Unicode Consortium has taken to standardizing fantasy languages like Klingon because at this point it's just whoever has the energy to show up and make proposals for specific scripts, and there's millions of code points left.)




# Design # {#design}

The specification is changed to make it a constraint violation. Users can still request strange values in their strings using, specifically, numeric escape sequences (`\x47593749478` or `\0473847439574398`). This follows most existing practice of compilers which warn/error (with no additional flags) when given this code:

```cpp
int main () {
    const char meow[] = u8"\U49584958";
    return 0;
}
```

([Godbolt Link to demonstrate here.](https://godbolt.org/z/EoaM3qqeb))

There are some compilers such as TCC which do not warn, and compile without any error. But, the output code does not seem to produce a valid sequence of UTF-8 characters.





# Wording # {#wording}

The following wording is [relative to N2596](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2596.pdf).



## Modify "§6.4.3 Universal character names ", paragraph 2 ## {#wording-6.4.3p2}

<blockquote>
<div class="wording-section">
<div class="wording-numbered-2">
<del>A universal character name shall not specify a character whose short identifier is less than 00A0
other than 0024 ($), 0040 (@), or 0060 (‘), nor one in the range D800 through DFFF inclusive.</del>
<ins>A universal character name shall not designate a codepoint where the hexadecimal value is:
<dl>
	<dd>— less than 00A0
other than 0024 ($), 0040 (@), or 0060 (‘);</dd>
	<dd>— in the range D800 through DFFF inclusive; or</dd>
	<dd>— greater than 10FFFF.<sup>78)</sup></dd>
</dl>
</ins>
…
<sup>78)</sup><sub>The disallowed characters are the characters in the basic character set and the code positions reserved by ISO/IEC 10646 for control characters, the character DELETE,<del> and</del> the S-zone (reserved for use by UTF–16)<ins>, and characters too large to be encoded by ISO/IEC 10646. Disallowed universal character escape sequences can still be specified with hexadecimal and octal escape sequences (6.4.4.4)</ins>.</sub>
</div>
</div>
</blockquote>