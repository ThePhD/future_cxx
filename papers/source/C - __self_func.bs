<pre class='metadata'>
Title: __self_func
H1: <code>__self_func</code>
Shortname: 3470
Revision: 1
Status: P
Date: 2025-02-03
Group: WG14
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
Editor: Shepherd (Shepherd's Oasis LLC), shepherd@soasis.org
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20embed.html
!Latest: <a href="https://thephd.dev/_vendor/future_cxx/papers/C%20-%20__self_func.html">https://thephd.dev/_vendor/future_cxx/papers/C%20-%20__self_func.html</a>
!Previous Revisions: None
!Paper Source: <a href="https://github.com/ThePhD/future_cxx/blob/main/papers/source/C%20-%20__self_func.bs">GitHub ThePhD/future_cxx</a>
Metadata Order: Editor, Latest, Previous Revisions, Paper Source, Implementation, Project, Audience
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: This is a proposal to allow for a function to refer to itself, useful in macros and within statement expressions.
</pre>

<script>
MathJax = {
	tex: {inlineMath: [['$', '$'], ['\\(', '\\)']]}
};
</script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>




# Changelog # {#changelog}



## Revision 1 - February 3<sup>rd</sup>, 2025 ## {#changelog-r1}

- Switch to using a keyword-style specification rather than a predefined identifier specification (allows for directly referencing the function rather than making a function pointer object).
- Add examples and explain (future) application, in anticipation of the Nested Functions and Lambda TS.



## Revision 0 - December 23<sup>rd</sup>, 2024 ## {#changelog-r0}

- Initial Release! 🎉




# Introduction and Motivation # {#intro}

C99 introduced `__func__`, which is the string name of the function. Microsoft added `__FUNCSIG__` and `__FUNCDNAME__` to provide another way to get the string name of the function call. But, none of the compilers ever added a way to refer to the current function directly, despite the need for it appearing it macros and other places that wished to implement e.g. Tail Recursion or other traits in a function name-agnostic ways. Macro authors forced users to pass in the name of the function so it could be properly recursed on, but this is slightly cumbersome.

Recently, `_Self` and -- at the behest of the Community to rename it -- `_Recur` have both shown up in Celeste's "C Extensions to Support Generalized Functions Calls, v3.5" [[N3315]]. Its specification is there in the wording but it only exists to describe tail-calling. Some support was expressed for lifting it out and making it its own entity rather than something that existed purely in the wording itself.

This paper is the lift out, implementing `__self_func` as a keyword.




# Design # {#design}

The design for this is, thankfully, very simple and easy: `__self_func` is a keyword/identifier that represents the current function invocation the compiler is in. This is implementable very simple in the compiler frontend by simply performing an identifier substitution for the name of the function being translated, and erroring if at file scope. `__self_func` is a "function designator" in C Standardese terms, that represents the current function. It is a constraint violation for it to be used at any non-block scope. The wording tries to make this easy by making it part of the block grammar, banning it for existing at file scope.

In general, this allows someone to 



## Separate from the function itself ## {#design-separation}

One of the key benefits of `__self_func` is the ability to use it in code without necessarily knowing the name of the function or being tied to the function in any way. This was actually an important addendum to emulating [va_start on Windows's x64 ABI](https://github.com/soasis/vargs/blob/main/include/ztd/vargs/va_intrinsics.h#L92-L108), which is not like the fully-documented SysV ABI. In C++, `decltype(func-name)` or `func-name` had to be passed to the function in order to get type information from the function to determine important qualities of the ABI and calling convention. This is what enabled full emulation of `va_start` outside of the C  or C++ standard library and retrieving values correctly on those platforms (e.g., being able to pass all the tests).

However, C++ still has a vast deficiency here in that even with their new Deducing This feature (see: [Gasper Azman's P0847](https://wg21.link/p0847)) which allows you to get the "this" of the function (even a "callable function" like a Lambda), it

0. does not work as a substitute for the function itself, just the "object" the function is tied to (if it has one);
1. and, does not allow someone to get the signature of the function they are within without explicitly modifying the function itself to pass that object to something like what is attempted in `va_start` in the above-linked code.

This means that C++ still can't viably implement `va_start(list)` with neither the last argument nor the function name passed explicitly to the macro. Deducing this also does not solve this problem because deducing this does not work inside of normal function calls. In C, there's two critical portions of this for a cross-platform implementation of `va_start` that relies purely on the library to perform this trick:

0. `typeof(foo)` allowing the retrieval of the function's type (standardized in C23);
1. `_Generic` (or other faux-reflection) allows 
2. and, some way to access the name of the function or function object without needing to modify the function signature as it stands (currently unavailable).

This means that the implementation of `va_start` above still has the same deficiency in both the C and C++ versions: we cannot get the name of the calling function independent of the user passing that in -- or passing the function type signature -- as extra information. The user must pass it in to us, which breaks the interface of `va_start` mandated by the standard (and is not helped by the old `va_start` interface that took an additional parameter representing the last argument to the function call).

This proposal enables standalone, independent retrieval of the function designator of the function in use, which gives access to both the function itself and, importantly for a pure, ABI-based, assembly-hacking, library-hacking implementation, the function's type signature.



## Future: Lambdas ## {#design-lambdas}

This is important when lambdas (e.g. Jens Gustedt's [Basic Lambdas for C: N2892](https://www.open-std.org/JTC1/SC22/WG14/www/docs/n2892.pdf)) need this as they are, effectively, anonymous complete function objects. They don't necessary have a name. This also applies to Apple's C extension, [Blocks](https://www.open-std.org/JTC1/SC22/WG14/www/docs/n1457.pdf); right now, there's no way to get the name of a Lambda or the start of an unnamed Block. `__self_func` solves this problem.



## Keyword Name ## {#design-name}

We do not care what this is called. This has 3 popular names:

- `self` (C++ using the "usual" name for its "Deducing This" feature, most users in C and C++-derived languages by convention)
- `this`/`*this` (C++, sometimes JavaScript when `this` is not rebound in strange ways)
- `recur` (Clojure and other LISP-style functional languages)

`__self` and `_Self` are common identifiers in some places. `_Recur` and `__recur` are fine and N3315 changed its nomenclature to that to follow feedback from the C community about what it could be named. `__func__`, unfortunately, already exists as a predefined identifier in C (it should have been called `__func_name__` but we can't fix that now). `__self_func` is what this proposal settled on, using the double underscores to have it exist in a space similar to an identifier, even if the intent is to exist as a keyword.

Another popular name is `__this_func__` or `__this_func`, but `this` and `__this` and `__this__` are highly contentious keywords that already exist and typically have meaning, thanks to C++ and member objects in-general.

As stated earlier, we do not care what it is called, so long as it exists. Suggestions are welcome and any name will do just fine.




# Wording # {#wording}

This wording is relative to C's latest working draft.


*📝 Editor's Note: The ✨ characters are intentional. They represent stand-ins to be replaced by the editor.*



## OPTIONAL: Modify "Predefined identifiers" (6.4.3.2) ## {#wording-6.4.3.2}

- change the mention of "execution encoding" in this section to instead be "literal encoding (6.2.9)";
- and, add `constexpr` to the list of specifiers for `static const char __func__[] = "function-name"`.



## Add the new keyword `__self_func` to §6.4.2 ## {#wording-6.4.2}

> **Syntax**
>
> <sup>1</sup>
> *postfix-expression:*
> :: *primary-expression*
> :: *postfix-expression* `[` *expression `]`
> :: *postfix-expression* `(` *argument-expression-list*<sub>opt</sub> `)`
> :: *postfix-expression* `.` *identifier*
> :: *postfix-expression* `->` *identifier*
> :: *postfix-expression* `++`
> :: *postfix-expression* `--`
> :: *compound-literal*
> :: <ins>`__self_func`</ins>



## Add a new section §6.5.3.✨ "`__self_func` ## {#wording-6.5.3.✨}

<blockquote>
<ins>
<div class="wording-clause-header">
<span class="wording-clause-number">6.5.3.✨</span> <span class="wording-clause-title">`__self_func`</span>
</div>

<div class="wording-section">

<div class="wording-clause-section-title">
Constraints
</div>

<div class="wording-numbered">
`__self_func` shall appear in a function body.
</div>

<div class="wording-clause-section-title">
Semantics
</div>

<div class="wording-numbered">

`__self_func` is the function designator (6.3.3.1) of the function it is used in.
</div>

<div class="wording-numbered">

**EXAMPLE** A program refers to the enclosing function even when the name is not directly known.

```cpp

#include <stdlib.h>
#include <stddef.h>
#include <stdio.h>
bool f (int tries, char* fn) {

#define MAX_TRIES 30
#define RE_DO(TRIES, ...) if (TRIES >= MAX_TRIES) goto TOO_MANY_TRIES;\
			                     return __self_func(TRIES + 1 __VA_OPT__(,) __VA_ARGS__);

	if (fn == nullptr) return false;
	size_t fnlen = strlen(fn);
	if (fnlen < 1) return false;
	FILE* f = fopen(fn);
	if (!f) {
		fn[fnlen - 1] = '0' + tries;
		RE_DO(tries, fn);
	}
	// found the first proper f,
	// use it
	fclose(f);
	return true;

	TOO_MANY_TRIES:
	if (f) fclose(f);
	return false;
}
```
</div>
</ins>
</blockquote>




<pre class="biblio">
{
	"n3315": {
		"authors": [
			"Alex Celeste"
		],
		"title": "C Extensions to support Generalized Function Calls, v3.5",
		"href": "https://www.open-std.org/JTC1/SC22/WG14/www/docs/n3315.htm",
		"date": "August 19th, 2024"
	}
}
</pre>
