<pre class='metadata'>
Title: Improved Normal Enumerations
Shortname: 29XX
Revision: 1
!Previous Revisions: <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2908.htm">N2908 (r0)</a>, Derived from <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2575.pdf">N2575 (r2)</a>
Status: P
Date: 2022-03-30
Group: WG14
!Proposal Category: Feature Request
!Target: C23
Editor: JeanHeyd Meneide (https://thephd.dev), phdofthehouse@gmail.com
Editor: Shepherd (Shepherd's Oasis LLC), shepherd@soasis.org
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Improved%20Normal%20Enumerations.html
!URL: <a href="https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Improved%20Normal%20Enumerations.html">https://thephd.dev/_vendor/future_cxx/papers/C - Improved Normal Enumerations.html</a>
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/source/C%20-%20Improved%20Normal%20Enumerations.bs">GitHub ThePhD/future_cxx</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, Latest, Paper Source, Issue Tracking, Project, Audience, Proposal Category, Target
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: Enumerations should allow values greater than <code>INT_MAX</code> and smaller than <code>INT_MIN</code>.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>




# Changelog # {#changelog}



## Revision 1 - March 30<sup>sth</sup>, 2022 ## {#changelog-r1}

- More directly specify the algorithm for selecting the types of enumeration constants, both after and midway through the definition of an enumeration.
- Move all of the specification for the new algorithm into Â§6.7.2.2 in the [[#wording-specification-6.7.2.2]].
- Add more rationale in [[#design-midway]] for the problems found in current implementation extensions.



## Revision 0 - January 1<sup>st</sup>, 2022 ## {#changelog-r0}

- Initial release ðŸŽ‰!




# Introduction and Motivation # {#intro}

C always designates `int` as the type for the enumerators of its enumerations, but it's entirely unspecified what the (underlying compatible) type for the `enum` will end up being. These constants (and the initializers for those constants) must fit within an `int`, otherwise it is a constraint violation. For decades, compilers have been silently providing extensions in their default build modes for enumerations to be larger than `int`, even if `_Generic` and friends always detects the type of such an enumerator to be `int`. It is problematic to only have enumerators which are `int`, especially since it is only guaranteed to be 16-bits wide. Portability breaks happen between normal 32-bit `int` environments like typical GCC and Clang x86 platforms vs. 16-bit `int` environments like SDCC microcontroller targets, which is not desirable.

This proposal provides for enumerations with enumerators of values greater than `INT_MAX` and smaller than `INT_MIN` to have enumerators that are of a different type than `int`, allowing the underlying type and the enumeration constants themselves to be of a different type. It does not change behavior for any enumeration constants which were within the `[INT_MAX, INT_MIN]` range already.




# Prior Art # {#prior}

The design of this feature is to enable what has been existing practice on implementations for a long time now, including GCC, SDCC, Clang, and several other compilers. Compilers have allowed for values greater than `INT_MAX` and values less than `INT_MIN` for a long time in their default compilation modes. We capture this as part of the design discussion below, for how we structure these proposed changes to the C Standard.




# Design # {#design}

This is a very small change that only makes previously ill-formed code now well-formed. It does not provide any other guarantees from the new wording besides allowing constants larger than `int` to be used with enumerations. Better enumeration types and values are better left with the sister paper [on Enhanced Enumerations](https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Improved%20Normal%20Enumerations.html).

More specifically:

- values for enumerators that are outside of the range `[INT_MIN, INT_MAX]` are allowed and change the type of the enumerators from `int`;
- and, the underlying type for enumerations with such types may be larger than `int`.

Particularly, this code:

```cpp
enum a {
	a0 = 0xFFFFFFFFFFFFFFFFULL
};

int main () {
	return _Generic(a0,
		unsigned long long: 0,
		int: 1,
		default: 2);
}
```

Should produce a value of `0` on a normal implementations (but can give other values, so long as the underlying type is big enough to fit a number (2<sup>64</sup> - 1)). It shall also not produce a diagnostic on even the most strict implementations.



## Using the Enumerators Midway in the Definition List ## {#design-midway}

Given this following code snippet:

```cpp
#include <limits.h>

#define GET_TYPE_INT(x) _Generic(x, \
	char: 1,\
	unsigned char: 2,\
	signed char: 3,\
	short: 4,\
	unsigned short: 5,\
	int: 6,\
	unsigned int: 7,\
	long: 8,\
	unsigned long: 9,\
	long long: 10,\
	unsigned long long: 11,\
	default: 0xFF\
	)\

enum x {
	a = INT_MAX,
	b = ULLONG_MAX,
	a_type = GET_TYPE_INT(a),
	b_type = GET_TYPE_INT(b)
};

#include <stdio.h>

int main () {
	printf("sizeof(long)=%d\n", (int)sizeof(long));
	printf("sizeof(long long)=%d\n", (int)sizeof(long long));
	printf("a_type=%d\n", (int)a_type);
	printf("b_type=%d\n", (int)b_type);
	printf("GET_TYPE_INT(a), outside=%d\n", (int)GET_TYPE_INT(a));
	printf("GET_TYPE_INT(b), outside=%d\n", (int)GET_TYPE_INT(b));
	return 0;
}
```

Compilers [are not consistent](https://godbolt.org/z/qe1fzTbYr), depending on how far with extensions they like to go. Anyone who was depending on a specific type was not relying on either (a) compilable C code, according to the C standard, or (b) widely-existing cross-platform C code, according to what implementation extensions do. Therefore, we attempt to enshrine the best of the available existing practice and improve the status quo somewhat here by giving the enumeration constants themselves the final underlying enumeration integer type. The reason we want to specify it this way is because implementations are wildly varying on how they handle this today in their extensions, with no clear consensus on how it is done. That is, using existing extensions today in various compilers, adding the following code into the above:

```cpp
extern enum x e_a;
extern __typeof(b) e_a;
extern __typeof(a) e_a;
```

results in various failures on today's implementations. This is because `a` and `b` are of different types (`a` is an `int` and not compatible with `enum x;` or `typeof(b)`, since those are both compatible with `long` or `long long` depending on the selection done by the implementation). We feel it is worthwhile to clarify this and make it more consistent: thus, the type chosen for the constants will be the underlying integer type that the enumeration type is compatible with, which provides the best safety and the best compatibility. This is also the expectation set by the standard: it chose `int` as the type for the enumeration constants, not caring what exactly the underlying type of the enumeration was chosen for.

We can fix this by providing a consistent choice of the underlying integer type of `enum x` for the integer constants when used after the closing brace of `}`. We do not expect many users to have relied on this detail because it varies so wildly between compilers, and even within single compiler implementations due to the use of enumeration-impacting flags.




# Proposed Wording # {#wording}

The following wording is [relative to N2731](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf).



## Intent ## {#wording-intent}

The intent of the wording is to provide the ability to express enumerations with the underlying type present. In particular:

- enumerations without an underlying type can have enumerators initialized with integer constant expressions whose type is `int` or some implementation-defined type capable of representing the constant expression's value.



## Proposed Specification ## {#wording-specification}


### Modify Section Â§6.4.4.3 Enumeration constants ### {#wording-specification-6.4.4.3}

<blockquote>

<div class="wording-clause-header">
<span class="wording-clause-number">6.4.4.3</span> <span class="wording-clause-title">Enumeration constants</span>
</div>

<div class="wording-section">
<div class="wording-clause-section-title">
Syntax
</div>

<div class="wording-numbered">

*enumeration-constant:*
:: *identifier*

</div>

<div class="wording-clause-section-title">
Semantics
</div>

<div class="wording-numbered">

An identifier declared as an enumeration constant for an enumeration has<del> type `int`</del><ins> the compatible integer type of the enumeration, as defined in 6.7.2.2.</ins>
</div>

Forward references: enumeration specifiers (6.7.2.2).
</blockquote>


### Modify Section Â§6.7.2.2 Enumeration constants ### {#wording-specification-6.7.2.2}

<blockquote>
<div class="wording-clause-header">
<span class="wording-clause-number">6.7.2.2</span> <span class="wording-clause-title">Enumeration specifiers</span>
</div>

<div class="wording-section">
<div class="wording-clause-section-title">
Syntax
</div>

<div class="wording-numbered">

*enum-specifier:*
:: **enum** <i>attribute-specifier-sequence<sub>opt</sub></i> <i>identifier<sub>opt</sub></i> <b>{</b> *enumerator-list* **}**
:: **enum** <i>attribute-specifier-sequence<sub>opt</sub></i> <i>identifier<sub>opt</sub></i> <b>{</b> *enumerator-list* <b>,</b> **}**
:: **enum** *identifier*

*enumerator-list:*
:: *enumerator*
:: *enumerator-list* **,** *enumerator*

*enumerator:*
:: *enumeration-constant* <i>attribute-specifier-sequence<sub>opt</sub></i>
:: *enumeration-constant* <i>attribute-specifier-sequence<sub>opt</sub></i> **=** *constant-expression*

</div>

<div class="wording-clause-section-title">
Constraints
</div>

<div class="wording-numbered">

The expression that defines the value of an enumeration constant shall be an integer constant expression.<del> that has a value representable as an `int`.</del><ins> For all the integer constant expressions which make up the values of the enumeration constant, there shall be an implementation-defined signed or unsigned integer type (excluding the bit-precise integer types) capable of representing all of the values.</ins>
</div>

<div class="wording-clause-section-title">
Semantics
</div>

<div class="wording-numbered">

The identifiers in an enumerator list are declared as constants and may appear wherever such are permitted.<span class="footnote-ref">133)</span> An enumerator with **=** defines its enumeration constant as the value of the constant expression. If the first enumerator has no **=**, the value of its enumeration constant is 0. Each subsequent enumerator with no **=** defines its enumeration constant as the value of the constant expression obtained by adding 1 to the value of the previous enumeration constant. (The use of enumerators with **=** may produce enumeration constants with values that duplicate other values in the same enumeration.) The enumerators of an enumeration are also known as its members.
</div>

<div class="wording-numbered">
<ins>

During the definition of each enumeration constant in the enumerator list, the processing of each integer constant expression which provides the value of the enumeration constant (given explicitly with **=** or otherwise) is performed using the largest signed or unsigned integer type (excluding bit-precise integer types) available to the implementation. The type of an enumeration constant before the closing **}** of the enumerator list shall be:

:: â€” `int` if its value is representable as an `int`; or,
:: â€” an implementation-defined signed or unsigned integer type (excluding bit-precise integer types) suitable for representing the value of the enumeration constant.<span class="footnote-ref">FN0âœ¨)</span>

</ins>
</div>

<div class="wording-numbered">

Each enumerated type shall be compatible with **char**, a signed integer type, or an unsigned integer type <ins>(excluding the bit-precise integer types)</ins>. The choice of type is implementation-defined<span class="footnote-ref">139)</span>, but shall be capable of representing the values of all the members of the enumeration.<ins><span class="footnote-ref">FN1âœ¨)</span></ins>
</div>

<div class="wording-numbered">

The enumerated type is incomplete until immediately after the **}** that terminates the list of enumerator declarations, and complete thereafter. <ins>The type of the members of the enumeration upon completion is:</ins>

<ins>

:: â€” `int` if all the values of the enumeration are representable as an `int`; or,
:: â€” an implementation-defined signed or unsigned integer type (that is not a bit-precise integer type) that is compatible with the enumerated type.

</ins>
</div>

<div>
<span class="footnote-ref">138)</span><span class="footnote">Thus, the identifiers of enumeration constants declared in the same scope are all required to be distinct from each other and from other identifiers declared in ordinary declarators.</span>
</div>
<div>
<span class="footnote-ref">139)</span><span class="footnote">An implementation can delay the choice of which integer type until all enumeration constants have been seen.</span>
</div>
<div>
<ins>
<span class="footnote-ref">FN0âœ¨)</span><span class="footnote">The type selected during processing of the enumerator list and before completion of the enumeration and after the enumeration is completed may be two separate types.</span>
</ins>
</div>
<div>
<ins>
<span class="footnote-ref">FN1âœ¨)</span><span class="footnote">If there is no such type, then this is a constraint violation.</span>
</ins>
</div>
</blockquote>
</div>


### Add implementation-defined enumeration behavior to Annex J ### {#wording-specification-annex-j}




# Acknowledgements # {#acknowledgements}

Thanks to:

- Aaron Ballman for help with the initial drafting;
- Aaron Ballman, Aaron Bachmann, Jens Gustedt & Joseph Myers for questions, suggestions and offline discussion;
- Robert Seacord for editing suggestions; and,
- Clive Pygott for the initial draft of this paper.

We hope this paper serves you all well.
