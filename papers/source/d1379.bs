<pre class='metadata'>
Title: std::to_underlying for enumerations
Shortname: D1379
Revision: 0
Audience: EWG, LEWG
Status: D
Group: WG21
URL: 
!Latest: <a href="https://thephd.github.io/vendor/future_cxx/papers/d1379.html">https://thephd.github.io/vendor/future_cxx/papers/d1379.html</a>
Repository: ThePhD/future_cxx
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
Date: 2018-11-26
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract: A proposal to add a short utility function to handle going from an enumeration to its untyped underlying variant!
</pre>

<pre class=include>
path: wording_style.bs
</pre>




# Revision History # {#changelog}



## Revision 0 - December 30th, 2018 ## {#changelog-r1}

	- Initial release.



# Motivation # {#changelog}

Many codebases write a version of a small utility function converting an enumeration to its underlying type. The reason for this function is very simple: applying `static_cast<int>` or `static_cast<unsigned long>` to change an enumeration to its underlying type makes it harder to quickly read and maintain places where the user explicitly converts from a strongly-typed enumeration to its underlying value for the purposes of working with an untyped API or similar: it looks like any old cast, making it harder to read code and potentially incorrect when enumeration types are changed from signed / unsigned or similar, masking potential bugs from size/signedness changes and hiding programmer intent. For example, going from this code,

```
enum class ABCD {
	A = 0x1012,
	B = 0x405324,
	C = A & B
};

// sometime later ...

void do_work(ABCD some_abcd_value) {
	// no warning, no visual indication,
	// is this what the person wanted,
	// what was the original intent in this
	// 'harmless' code?
	internal_untyped_api(static_cast<int>(some_abcd_value));
}
```

To this code:

```
#include <cstdint>

// changed enumeration, underlying type
enum class ABCD : uint32_t {
	A = 0x1012,
	B = 0x405324,
	C = A & B,
	D = 0xFFFFFFFF // !!
};

// from before:

void do_work(ABCD some_abcd_value) {
	// no warning, no visual indication,
	// is this what the person wanted,
	// what was the original intent in this
	// 'harmless' code?
	internal_untyped_api(static_cast<int>(some_abcd_value));
}
```

Calling `do_work(ABCD::D);` is a code smell internally because the cast is the wrong one for the enumeration. If the internal untyped API takes an integral value larger than the size of `int` and friends, then this code might very well pass an unintended and wrong result, too. Of course, this change does not trigger warnings or errors: `static_cast<int>` is a declaration of intent that says "I meant to do this cast", even if that cast was done before any changes or refactoring was performed.

We propose an intent-preserving function called `std::to_underlying( value );` that only works on enumeration types. It will `static_cast` the enumeration to integral representation with `std::underlying_type_t<EnumT>`.

# Design # {#design}



<pre class=biblio>
{
	"n4762": {
		"authors": [
			"ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee",
			"Richard Smith"
		],
		"title": "N4762 - Working Draft, Standard for Programming Language C++",
		"href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4762.pdf",
		"date": "May 7th, 2018"
	},
	"p1040": {
		"authors": [
			"JeanHeyd Meneide"
		],
		"title": "std::embed",
		"href": "https://wg21.link/p1040",
		"date": "October 12th, 2018"
	},
	"p0424": {
		"authors": [
			"Louis Dionne",
			"Hana Dusíková"
		],
		"title": "String literals as non-type template parameters",
		"href": "https://wg21.link/p0424",
		"date": "November 14th, 2017"
	},
	"p0732": {
		"authors": [
			"Jeff Snyder",
			"Louis Dionne"
		],
		"title": "Class Types in Non-Type Template Parameters",
		"href": "https://wg21.link/p0732",
		"date": "June 6th, 2018"
	},
	"p0259": {
		"authors": [
			"Michael Price",
			"Andrew Tomazos"
		],
		"title": "fixed_string: a compile-time string",
		"href": "https://wg21.link/p0259",
		"date": "2016"
	}
}
</pre>
