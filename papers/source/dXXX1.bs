<pre class='metadata'>
Title: nodiscard should have a reason
Shortname: PXXX1
Revision: 0
Audience: LEWG, LWG
Status: P
Group: WG21
URL: 
!Current Source: <a href="https://github.com/ThePhD/future_cxx/blob/master/papers/source/dXXX1.bs">github.com/ThePhD/future_cxx/blob/master/papers/source/dXXX1.bs</a>
!Current: <a href="https://rawgit.com/ThePhD/future_cxx/master/papers/dXXX1.html">https://rawgit.com/ThePhD/future_cxx/papers/dXXX1.html</a>
!Reply To: <a href="mailto:isabella.muerte@target.com">Isabella Muerte</a>, <a href="https://twitter.com/slurpsmadrips">@slurpsmadrips</a>
Repository: ThePhD/future_cxx
Editor: Isabella Muerte, isabella.muerte@target.com
Editor: JeanHeyd Meneide
Abstract: This paper proposes allowing an explanatory string token for use with a no discard attribute.
Date: 2018-10-07
Markup Shorthands: markdown yes, biblio yes, markup yes
</pre>

<pre class=include>
path: wording_style.bs
</pre>

# Revision History # {#changelog}


## Revision 0 ## {#changelog-r0}

		Initial release.


# Motivation # {#motivation}

The `[[nodiscard]]` attribute has helped prevent a serious class of software bugs, but sometimes it is hard to communicate exactly why a function is marked as `[[nodiscard]]`.

This paper adds an addendum to allow a person to add a string attribute token to let someone provide a small reasoning or reminder for why a function has been marked `[[nodiscard("Please do not leak this memory!")]]`.



# Design Considerations # {#design}

This paper is an enhancement of a preexisting feature to help programmers provide clarity with their code. Anything that makes the implementation warn or error should also provide some reasoning or perhaps point users to a knowledge base or similar to have any questions they have about the reason for the `nodiscard` attribute answered.

The design is very simple and follows the lead of the `deprecated` attribute. We propose allowing a string literal to be passed as an attribute argument clause, allowing for `[[nodiscard("You must use the returned token with api::foobar")]]`.


# Wording # {#wording}

All wording is relative to [[n4762]].


## Intent ## {#wording-intent}

The intent of the wording is to let a programmer specify a string literal that the compiler can use in their warning / error display for, e.g. `[[nodiscard("Please check the status variable")]]`.


## Feature Test Macro ## {#wording-feature}

`nodiscard` already has an attribute value in Table 15. If this proposal is accepted, then per the standard's reasoning the value of `nodiscard` should be increased to some greater value (such as `201811L`).


## Proposed Wording ## {#wording-library}

Modify §14.1 [**cpp.cond**]'s **Table 15**:

<blockquote>
<table>
<tr>
	<th>Attribute</th>
	<th>Value</th>
</tr>
<tr>
	<td>nodiscard</td>
	<td><del>201603L</del><ins>201811L</ins></td>
</tr>
</table>
</blockquote>

Append the following to §9.11.9 Nodiscard attribute [**dcl.attr.nodiscard**]'s clause 1:

<blockquote>
<p><sup>1</sup> The *attribute-token* nodiscard may be applied to the declarator-id in a function declaration or to the declaration of a class or enumeration. It shall appear at most once in each attribute-list and no *attribute argument-clause* shall be present. <ins>An attribute-argument-clause may be present and, if present, it shall have the form:</ins></p>

<p><ins>( string-literal )</ins></p>

<p><ins>[Note: The string-literal in the attribute-argument-clause could be used to explain the rationale for why the entity must not be discarded. — end note]</ins></p>
</blockquote>

<pre class=biblio>
{
	"heisenbugs": {
		"title": "Heisenbugs",
		"href": "https://en.wikipedia.org/wiki/Heisenbug",
		"date": "August 20th, 2018"
	},
	"optional-survey": {
		"title": "Optional: What's In Our Codebases",
		"href": "",
		"date": "August 20th, 2018"
	},
	"sol2": {
		"authors": [
			"ThePhD"
		],
		"title": "sol2: C++ <-> Lua Binding Framework",
		"href": "https://github.com/ThePhD/sol2",
		"date": "July 3rd, 2018"
	},
	"p0798": {
		"authors":[
			"Simon Brand"
		],
		"title": "Monadic operations for std::optional",
		"href": "https://wg21.tartanllama.xyz/monadic-optional/",
		"date": "May 4th, 2018"
	},
	"N3793": {
		"authors": [
			"Fernando Luis Cacciola Carballal",
			"Andrzej Krzemieński"
		],
		"title": "A proposal to add a utility class to represent optional objects (Revision 5)",
		"href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3793.html",
		"date": "March 10th, 2013"
	},
	"foonathan-cppnow": {
		"authors": [
			"Jonathan Müller"
		],
		"title": "C++Now 2018: Rethinking Pointers",
		"href": "https://foonathan.net/cppnow2018.html",
		"date": "May 9th, 2018"
	},
	"foonathan-optional-problems": {
		"authors": [
			"Jonathan Müller"
		],
		"title": "Let's Talk about std::optional<T&> and optional references",
		"href": "https://foonathan.net/blog/2018/07/12/optional-reference.html",
		"date": "July 12th, 2018"
	},
	"llvm-optional": {
		"authors": [
			"LLVM Developer Group"
		],
		"title": "Optional.h",
		"href": "http://llvm.org/doxygen/Optional_8h_source.html",
		"date": "July 4th, 2018"
	},
	"abseil-optional": {
		"authors": [
			"Titus Winters",
			"Google"
		],
		"title": "abseil",
		"href": "https://github.com/abseil/abseil-cpp",
		"date": "July 4th, 2018"
	},
	"argot": {
		"authors": [
			"Matt Calabrese"
		],
		"title": "argot",
		"href": "https://github.com/mattcalabrese/argot",
		"date": "July 1st, 2018"
	},
	"martinmoene-optional": {
		"authors": [
			"Martin Moene"
		],
		"title": "Optional Lite",
		"href": "https://github.com/martinmoene/optional-lite",
		"date": "June 21st, 2018"
	},
	"folly-optional": {
		"authors": [
			"Facebook"
		],
		"title": "folly/Optional",
		"href": "https://github.com/facebook/folly",
		"date": "August 11th, 2018"
	},
	"mnmlstc-optional": {
		"authors": [
			"Isabella Muerte"
		],
		"title": "core::optional",
		"href": "https://mnmlstc.github.io/core/optional.html",
		"date": "February 26th, 2018"
	},
	"akrzemi-optional": {
		"authors": [
			"Andrzej Krzemieński"
		],
		"title": "Optional (nullable) objects for C++14",
		"href": "https://github.com/akrzemi1/Optional",
		"date": "April 23rd, 2018"
	},
	"boost-optional": {
		"authors": [
			"Fernando Luis Cacciola Carballal",
			"Andrzej Krzemieński"
		],
		"title": "Boost.Optional",
		"href": "https://www.boost.org/doc/libs/1_67_0/libs/optional/doc/html/index.html",
		"date": "July 24th, 2018"
	},
	"llama-optional": {
		"authors": [
			"Simon Brand (TartanLlama)"
		],
		"title": "Optional",
		"href": "https://github.com/TartanLlama/optional",
		"date": "June 7th, 2018"
	},
	"foonathan-optional": {
		"authors": [
			"Jonathan Müller"
		],
		"title": "type_safe",
		"href": "https://github.com/foonathan/type_safe",
		"date": "June 22nd, 2018"
	},
	"n4762": {
		"authors": [
			"ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee",
			"Richard Smith"
		],
		"title": "n4762 - Working Draft, Standard for Programming Language C++",
		"href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4750.pdf",
		"date": "May 7th, 2018"
	}
}
</pre>
