<pre class='metadata'>
Title: Official Function Nomenclature
Shortname: 3365
Revision: 0
!Previous Revisions: None
Status: P
Date: 2024-10-01
Group: WG14
!Proposal Category: Editorial Fix
!Target: C2y
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Transparent%20Aliases.html
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/source/C%20-Transparent%20Aliases.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, This Version, Paper Source, Implementation, Issue Tracking, Project, Audience, Proposal Category, Target
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: Terminology update for functions.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>





# Changelog # {#changelog}



## Revision 0 - October <sup>1st</sup>, 2024 ## {#changelog-r0}

- Initial release. ✨




# Introduction & Motivation # {#motivation}

This paper is a pure editorial change for properly classifying the various parts of function declarations/definitions in C, as there is misleading/confusing terminology surrounding these terms as illustrated [by N6559](https://www.open-std.org/JTC1/SC22/WG14/www/docs/n3359.pdf).




# Possible WG14 Direction? # {#direction}

Two possible names for both sets of things:
- "varying functions" or "variadic functions"
- "varying arguments" or "variadic arguments"

Standard currently uses "variable arguments" in places, which strangely I rarely hear in the wild unless directly referencing the title of the clause 7.16.1 `<stdarg.h>`.


# Wording # {#wording}

The following wording is registered against the latest working draft as of October 1st, 2024.



## Modify §6.5.5.3 to use variadic ## {#wording-6.5.5.3}

- Change "The ellipsis notation in a <del>function prototype declarator</del> …" to "The ellipsis notation in a <ins>variadic function declarator (6.7.7.4)</ins> …".



## Modify §6.7.7.4 to define variadic functions ## {#wording-6.7.7.4}

<blockquote>

<div class="wording-clause-header">
<span class="wording-clause-number">6.7.7.4</span><span class="wording-clause-title">Functions declarators</span>
</div>

<div class="wording-section">

<div>
…
</div>

<div class="wording-numbered wording-numbered-8">

If the list terminates with an ellipsis (...), no information about the number or types of the parameters after the comma is supplied.<ins> Declarators with the ellipses in a parameter list are known as *variadic functions*. Arguments supplied to a function whose positions match or come after the ellipsis in the parameter list are its *varying arguments*.</ins>
</div>

<div>
…
</div>

<div class="wording-numbered wording-numbered-14">

For two function types to be compatible, both shall specify compatible return types. Moreover, the parameter type lists shall agree in the number of parameters and <del>in use of the final ellipsis</del><ins>whether the function is variadic or not</ins>; …
</div>


<div class="footnote">

<sup>162)</sup>The macros defined in the `<stdarg.h>` header (7.16) can be used to access arguments that correspond to the ellipsis<ins> in variadic functions</ins>.
</div>

</div>

</blockquote>



## Modify §6.9.2 to define the types/parts of a function ## {#wording-6.9.2}

<blockquote>

<div class="wording-clause-header">
<span class="wording-clause-number">6.9.2</span><span class="wording-clause-title">Functions definitions</span>
</div>

<div class="wording-section">

<div>
…
</div>

<div class="wording-numbered wording-numbered-9">

If <del>a function that accepts a variable number of arguments</del><ins>a declarator for a variadic function</ins> is later defined as a non-variadic function, the behavior is undefined.
</div>

<div class="wording-numbered wording-numbered-10">

The parameter type list, the attribute specifier sequence of the declarator that follows the parameter type list, and the compound statement of the function body form a single block.<sup>193)</sup><ins>The block defined by just the compound statement of a function body, without its parameter type list or attribute specifier sequence, is known as the *function body block*.</ins> Each parameter has automatic storage duration; its identifier, if any,<sup>194)</sup> is an lvalue.<sup>195)</sup> The layout of the storage for parameters is unspecified.
</div>

</blockquote>


## Modify §7.16 ## {#wording-7.16}

- Change 7.16 title from "<del>Variable arguments `<stdarg.h>`</del>" to <ins>Varying arguments `<stdarg.h>`</ins>".
- Rewrite "<del>The header `<stdarg.h>` declares a type and defines five macros, for advancing through a list of arguments whose number and types are not known to the called function when it is translated.</del>" or equivalent text from paragraph 1 to "<ins>The header `<stdarg.h>` declares a type and defines five macros and functions, for use with variadic functions and varying arguments.</ins>"
- Remove "<del>A function may be called with a variable number of arguments of varying types if its parameter type list ends with an ellipsis.</del>" or equivalent text from paragraph 3.
- Change 7.16.2 title from "<del>Variable argument</del> list access macros" to "<ins>Varying argument</ins> list access macros".
- Change "The `va_start` macro may only be invoked in the <del>*compound-statement* of the body</del> of a variadic function." or equivalent to "The `va_start` macro may only be invoked in the <ins>function body block</ins> of a variadic function." from paragraph 2.

## Find-and-replace Changes ## {#wording-global.regex}

- Find all leftover occurrences of "function with a variable number of arguments" and change to "variadic function" throughout the standard.
- Find all leftover occurrences of "function with variable number of arguments" and change to "variadic function" throughout the standard.
- Find all leftover occurrences of "variable argument" and change to "varying arguments" throughout the standard.
