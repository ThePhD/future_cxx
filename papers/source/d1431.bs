<pre class='metadata'>
Title: Labeled Loops: well-constrained, idiomatic loop handling in C++
Shortname: D1431
Revision: 0
Audience: EWG, LEWG
Status: D
Group: WG21
URL: 
!Latest: <a href="https://thephd.github.io/vendor/future_cxx/papers/d1431.html">https://thephd.github.io/vendor/future_cxx/papers/d1431.html</a>
Repository: ThePhD/future_cxx
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
Date: 2019-01-21
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract: A proposal for labeling loops and enabling more sophisticated loop control in constexpr and non-constexpr contexts.
</pre>

<pre class=include>
path: wording_style.bs
</pre>




# Revision History # {#changelog}



## Revision 0 - March 13th, 2019 ## {#changelog-r1}

	- Initial release.



# Motivation # {#motivation}

<table>
	<tr>
		<th>Currently</th>
		<th>With Proposal</th>
	</tr>
	<tr>
		<td>
```c++
for (int i = 0; i < 4; ++i) {
	bool outer_loop_flag = false;
	for (int j = 0; j < 4; ++j) {
		if (i > 2 && check_indices(i, j)) {
			outer_loop_flag = true;
			break;
		}
	}
	if (outer_loop_flag) {
		break;
	}
}
```
- ⚠️ Requires flag; optimizations required to turn this into single jump.
- ⚠️ Accumulates more flags and other complex checks that do not scale well.
		</td>
		<td>
```c++
for (int i = 0; i < 4; ++i)  outer_loop: {
	for (int j = 0; j < 4; ++j) inner_loop: {
		if (i > 2 && check_indices(i, j)) {
			break outer_loop;
		}
	}
}
```

- ✔️ Breaks properly without flags.
- ✔️ Does not require additional bool and checking: no optimizer necessary to do a direct jump out of the loop and communicate intent.
		</td>
	</tr>
</table>

Currently in C++, we are faced with issue of handling nested loops and jumping out of multiple loops. Doing so with flag values


# Design # {#design}

```
while (condition) label-name { ... }

do { ... } while (condition) label-name;

for (init; condition; incr) label-name { ... }

for (type-seq var : expr ) label-name { ... }
```

