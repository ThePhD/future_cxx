<pre class='metadata'>
Title: Enhancements to Enumerations
Shortname: 29XX
Revision: 3
!Previous Revisions: <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2575.pdf">N2575 (r2)</a>, <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2533.pdf">n2533 (r1)</a>, <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2008.pdf">n2008 (r0)</a>
Status: P
Date: 2021-12-15
Group: WG14
!Proposal Category: Feature Request
!Target: General Developers, ABI Lovers, Embedded Systems Developers
Editor: JeanHeyd Meneide (thephd.dev), phdofthehouse@gmail.com
Editor: Shepherd (Shepherd's Oasis LLC), shepherd@soasis.org
Editor: Clive Pygott (LDRA Ltd.)
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Enhanced%20Enumerations.html
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/source/C%20-%20Enhanced%20Enumerations.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, This Version, Paper Source, Implementation, Issue Tracking, Project, Audience, Proposal Category, Target
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: Enumerations should have the ability to specify the underlying type to aid in portability and usability across platforms, across ABIs, and across languages (for serialization and similar purposes).
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<div class="pagebreak"></div>




# Changelog # {#changelog}



## Revision 2 - December 15th, 2021 ## {#changelog-r3}

- Change of paper primary author to JeanHeyd and Shepherd: thank you, Clive Pygott, for your studious shepherding of this issue for over 4 years!
- Address feedback and comments from March/April 2021 Virtual Meeting.
- Address direct feedback from Joseph Myers and Robert Seacord (thank you for the effort!).
- Allow `_Bool` as an underlying type. (This matches C++ and C extensions.)
- Change how enumerations **without** an underlying type are treated in Standard C (expanding the rights, not removing any rights, preserves old code semantics).



## Revision 2 - October 4th, 2020 ## {#changelog-r2}

- Prepare for changes to C23, address some minor feedback comments from the August 2020 Virtual Meeting.
- Support for forward declarations of both fixed underlying type enumerations and enumerations without fixed underlying type.
- Clarify that `_Bool` should probably not be supported as an underlying type.



## Revision 1 - June 28th, 2020 ## {#changelog-r1}

- Address main comment from 2016 meeting: clumsy concrete syntax for *enum-type-specifier* was overly restrictive (e.g., wouldnâ€™t allow the use of a typedef). Use `type-specifier` term more clearly.
- Change syntax to allow for attributes.



## Revision 0 - February 17th, 2016 ## {#changelog-r0}

- Initial release ðŸŽ‰!




# Introduction and Motivation # {#intro}

C normally tries to picks `int` for its enumerations, but it's entirely unspecified what the type for the `enum` will end up being. It's constants (and the initializers for those constants) are always treated as `int`s, which is not very helpful for individuals who want to use things like enumerations in their bitfields with specific kinds of properties. This means it's impossible to portably define an enumeration, which drastically decreases its usefulness and makes it harder to rely on enumeration values (and consequently, their type) in standard C code. This has led to a number of communities and tools attempting to do enumerations differently in several languages, or in the case of C++ simply enhancing enumerations with specific features to make them both portable and dependable.

This proposal provides an underlying enumeration type, specified after a colon of the _identifier_ for the enumeration name, to give the enumeration a dependable type. It makes the types for each of the enumeration constants the same as the specified underlying type, while leaving the current enumerations as unspecified as they were in their old iterations. It does not attempt to solve problems outside the scope of making sure that constants with specified underlying type are dependable, and attempts to make forward declaration of enumerations work across implementations.




# Prior Art # {#prior}

C++ has this as a feature for their enumerations. Certain C compilers have this as an extension in 
their C compilation modes specifically, [including Clang](https://godbolt.org/z/xMz6n7TKK).




# Design # {#design}

The design of this feature follows C++'s syntax for both compatibility reasons and because the design is genuinely simple and useful:

```cpp
enum a : unsigned long long {
	a0 = 0xFFFFFFFFFFFFFFFFULL
	// ^ not a constraint violation with a 64-bit unsigned long long
};
```

Furthermore, the type of `a0` is specified to be `unsigned long long`, such this program:

```cpp
enum a : unsigned long long {
	a0 = 0xFFFFFFFFFFFFFFFFULL
};

int main () {
	return _Generic(a0, unsigned long long: 0, default: 1);
}
```

exits with a return value of `0`. Note that because this change is entirely opt-in, no previous code is impacted and code that was originally a syntax violation will become well-formed with the same semantics as they had from their C++ counterparts. The interesting component of this proposal - that is currently marked optional - addresses a separate issue found in the current enumeration specification.


## Schrodinger's Enumeration Values ## {#design-schrodinger}

Currently, enumerations are specified to take any type that is suitable for holding all of their values. This means that an enumeration can be treated as a `char`, `unsigned char`, `short`, `unsigned short`, `int`, `long`, and so on and so forth. But, there's some clause in [[N2731]] that makes interacting with it far more interesting:

> The expression that defines the value of an enumeration constant shall be an integer constant expression that has a value representable as an `int`.
>
> â€” Â§6.7.2.2Â¶2, Enumeration Specifiers, Constraints

This presents some interesting problems for end-users. Plain `enum`s cannot portable represent numeric values outside the range `[INT_MIN, INT_MAX]`. Implementations that allow it quickly enter in a zone where they begin to choose their own semantics for such a selection, which makes code brittle and non-portable. Furthermore, it complicates things like `_Generic` selection with clauses such as this:

> The identifiers in an enumerator list are declared as constants that have type `int` and may appear wherever such are permitted.
>
> â€” Â§6.7.2.2Â¶4, Enumeration Specifiers, Semantics

So, the underlying type and the storage type of an enumeration may be anything from `char` to an implementation-defined `__int128_t`. But, when used, it must be an integer value. This creates a strong friction between the actual values of the enumeration and what the underlying type is meant to be. It creates further problems where `unsigned short` and `int` have the same bit-width (since both are allowed to be 16 bits) on a given platform and cause integer-promotion conversion issues (unsigned-to-signed conversion resulting in negative numbers, or worse). Finally, as alluded to before, it creates issues in `_Generic` selection clauses:

```cpp
enum e {
    E1 = 1
};

enum f {
    F1 = 0xFFFFFF
};

int main () {
#define EXPR_TO_TYPE_INT(...) _Generic((__VA_ARGS__), \
        unsigned long long: 12, \
        long long: 11, \
        unsigned long: 10, \
        long: 9, \
        unsigned int: 8, \
        int: 7, \
        unsigned short: 6, \
        short: 5, \
        unsigned char: 4, \
        signed char: 3, \
        char: 2, \
        default: 0)

    int a = EXPR_TO_TYPE_INT((enum e)E1);
    int b = EXPR_TO_TYPE_INT(E1);
    int c = EXPR_TO_TYPE_INT((enum f)F1);
    int d = EXPR_TO_TYPE_INT(F1);
    return a + b * 100
    + c * 10000 + d * 1000000;
}
```

On a conforming implementation, this program can return decimal `7080704` (`a = 4`, `b = 7`, `c = 8`, `d = 7`), which signifies that the program is choosing `int` for `E1` as mandated but `unsigned char` for the expression `(enum e)E1`. Similarly, it chooses `int` for `F1` as required but `unsigned int` for `(enum f)F1`. What's worse, is that without warning flags cranked up implementations have taken to providing interesting implementation-based behavior for enumerations that exceed the value of `INT_MAX` or go below the value of `INT_MIN`. If you consider the same program but with a small replacement:

```cpp
// â€¦
enum f {
    F1 = 0xFFFFFFFF
};

// â€¦
```

Then some implementations (e.g., [Clang GCC, and others](https://godbolt.org/z/csxs679Ka)) will choose `unsigned int` for both the enumerator type AND the enumeration constant. This is confusing behavior: the enumerators should be capable of reflecting the values put in, especially if their underlying type is capable of being flexible. The only way to force more standard conforming behavior and force constraint violations is to crank up warning and error reporting to maximum levels (e.g., `-Werror -Wpedantic`).

In short, it is already widely existing practice to size enumerations to fit the values put in them. Some users try to force a specific minimum width by employing an enumeration constant of the form `FORCE_MAX = INT_MAX`, as well as other work-around enumeration values. These kinds of work-arounds are already present and common in some code to try and get [something of a standard behavior](https://stackoverflow.com/a/4879348).

To aid users and implementations in this endeavor for non-fixed underlying type enumerations, we also propose to expand the allowed types for enumeration constants and the values used to initialize them. This has no effect on currently standards-conforming code, because standards-conforming code could only specify values in the range of `[INT_MIN, INT_MAX]` while many other implementations supported additional values as an extension. Implementations for older, standards-compliant enumerations will continue to work as expected, while the wording we provide allows:

- integer constant expressions for initialization to be of any type large enough to hold the representation; and,
- enumeration constants to be of an implementation-defined type after they are complete.

Implementations that wish to keep their current behavior simply do nothing. Making no changes to how they handle their enumerations without fixed underlying type today means everything continues to work. For everyone else with new ABIs or compiling to platforms without interoperability concerns, implementations can achieve maximally compressed and properly typed integer constants, whichever is best for the end-user, without needing to worrying arbitrarily about the width of `int` and how large `INT_MAX` or how small `INT_MIN` might truly be.



## Bit-Precise Integer Types and `_Bool`? ## {#design-bit.precise.integers}

Integers such as `_BitInt(31)` are, currently, allowed as an extension for an underlying enumeration type in Clang. However, discussing this with the Clang implementers, there was sentiment that this just "happened to work" and was a not a fully planned part of the `_BitInt`/`_ExtInt` integration plan. They proposed that they would implement a diagnostic for it for future versions of Clang. In the standard, we do not want to step on the toes of anyone who may want to develop extensions in this place, especially when it comes to whether or not bit-precise enumeration types undergo integer promotion or follow the same rules for enumeration constants and similar. Therefore, we exclude them as usable types at this time.

We do not exclude `_Bool` from the possible set of types. It is [allowed in C++](https://godbolt.org/z/fY4sedEe4) (as just `bool`) and other C extensions, and it allows for an API to provide mnemonic or otherwise fitting names for binary choices without needing to resort to a bit-field of a particular type. This provides a tangible benefit to code. Values outside of `true` or `false` can be errored/warned on when creating a `_Bool` enumeration, but that is a quality of implementation decision.



# Proposed Wording # {#wording}

The following wording is [relative to N2731](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf).



## Intent ## {#wording-intent}

The intent of the wording is to provide the ability to express enumerations with the underlying type present. In particular:

- enumerations can optionally have a type declared as the underlying type or otherwise defaults to the previous behavior (opt-in);
- enumerations with an underlying type must use a signed or unsigned (standard or extended) integer type that is not a bit-precise integer type, or another enumeration type directly;
- enumerations with underlying types ignore const, volatile, `_Atomic`, and all other qualifiers on a given type;
- enumerations with underlying types can be forward-declared;
- enumerations with underlying types cannot be forward-declared with different underlying types than the first forward declaration;
- enumerations with an underlying type can be redeclared without an underlying type (e.g., `enum a : int;` matches `enum a;`);
- enumerations without an underlying type can be redeclared with an underlying type (e.g., `enum a;` matches `enum a : short;` but cannot be re-redeclared as `enum a : long` in the same translation unit);
- enumerations with an underlying type can have enumerators initialized with integer constant expressions whose type is not strictly `int` or `unsigned int` used to specify their values;
- enumerations without an underlying type can have enumerators initialized with integer constant expressions whose type is `int` or some implementation-defined type of greater or equal bit width;
- enumerations of an underlying type used directly in a generic expression are treated as an integer of that underlying type; and,
- operations performed on an enumeration with an underlying type treat the type of the enumeration as an integer of that specified underlying type.



## Proposed Specification ## {#wording-specification}


### Modify Section Â§6.2.7 Compatible type and composite type, paragraph 1 ### {#wording-specification-6.2.7p1}

<blockquote>
<div class="wording-section">
<div class="wording-numbered">
â€¦ Moreover, two structure, union, or enumerated types declared in separate translation units are compatible if their tags and members satisfy the following requirements: if one is declared with a tag, the other shall be declared with the same tag. If both are completed anywhere within their respective translation units, then the following additional requirements apply: â€¦ For two enumerations, corresponding members shall have the same values <ins>and their underlying types shall be compatible types.</ins>
</div>
</div>
</blockquote>


### Modify Section Â§6.4.4.3 Enumeration constants ### {#wording-specification-6.4.4.3}

<blockquote>
<div class="wording-section">
<p><b>6.4.4.3 &emsp; Enumeration constants</b></p>
<p><b>Syntax</b></p>
<div class="wording-numbered">
<dl>
	<dd><i>enumeration-constant:</i>
	<dl>
		<dd><i>identifier</i></dd>
	</dl>
	</dd>
</dl>
</div>

<p><b>Semantics</b></p>
<div class="wording-numbered">
<del>An identifier declared as an enumeration constant for an enumeration without fixed underlying type has type <b>int</b>.</del><ins>An identifier declared as an enumeration constant for an enumeration with fixed underlying type has that underlying type during the specification of the enumeration type (i.e., at the start of the opening brace in the <i>enum-specifier</i>).</ins>
</div>

<ins>
<div class="wording-numbered">
An identifier declared as an enumeration constant for an enumeration without fixed underlying type has an implementation-defined type wide enough for its value until the type is complete (i.e., until the closing brace in the <i>enum-specifier</i>). After the type is complete, the enumeration constant for an enumeration without fixed underlying type has an implementation-defined type large enough to hold all of its members.
</div>
</ins>

<ins>
<div class="wording-numbered">
An enumeration constant may be used in an expression wherever a value of standard or extended integer type may be used. It has the underlying type of the enumeration.
</div>
</ins>
</div>

Forward references: enumeration specifiers (6.7.2.2).
</blockquote>


### Modify Section Â§6.7.2.2 Enumeration constants ### {#wording-specification-6.7.2.2}

<blockquote>
<div class="wording-section">
<b>6.7.2.2 Enumeration specifiers</b>

<p><b>Syntax</b></p>
<dl>
	<dd><i>enum-specifier:</i>
	<dl>
		<dd><b>enum</b> <i>attribute-specifier-sequence<sub>opt</sub></i> <i>identifier<sub>opt</sub></i> <ins><i>enum-type-specifier<sub>opt</sub></i></ins> <b>{</b> <i>enumerator-list</i> <b>}</b>
		<dd><b>enum</b> <i>attribute-specifier-sequence<sub>opt</sub></i> <i>identifier<sub>opt</sub></i> <ins><i>enum-type-specifier<sub>opt</sub></i></ins> <b>{</b> <i>enumerator-list</i> <b>,</b> <b>}</b>
		<dd><b>enum</b> <i>identifier</i>
	</dl>
	</dd>
	<dd><i>enumerator-list:</i>
	</dl>
		<dd><i>enumerator</i></dd>
		<dd><i>enumerator-list</i> <b>,</b> <i>enumerator</i></dd>
	</dl>
	</dd>
	<dd><i>enumerator:</i>
	<dl>
		<dd><i>enumeration-constant</i> <i>attribute-specifier-sequence<sub>opt</sub></i></dd>
		<dd><i>enumeration-constant</i> <i>attribute-specifier-sequence<sub>opt</sub></i> <b>=</b> <i>constant-expression</i></dd>
	</dl>
	</dd>
	<ins>
	<dd><ins><i>enum-type-specifier:</i>
	<dl>
		<dd><b>:</b> <i>specifier-qualifier-list</i></dd>
	</dl>
	</ins></dd>
	</ins>
</dl>

<div class="wording-numbered">
<ins>All enumerations have an <i>underlying type</i>. The underlying type can be explicitly specified using an <i>enum-type-specifier</i> and such an underlying type is its <i>fixed underlying type</i>.</ins>
</div>

<b>Constraints</b>

<div class="wording-numbered">
<ins>The type specifiers in the enum type specifier's <i>specifier-qualifier-list</i> shall specify an integer type that is not an enumerated type or a bit-precise integer type. No alignment specifiers shall appear in the specifier qualifier list. The underlying type of the enumeration is the unqualified, non-atomic version of the type specified by the type specifiers in the specifier qualifier list.</ins>
</div>

<div class="wording-numbered">
<ins>The expression that defines the value of an enumeration constant of an enumeration with a fixed underlying type shall have a value representable as that fixed underlying type.</ins>
</div>

<div class="wording-numbered">
<del>The</del><ins>For an enumeration without a fixed underlying type, the</ins> expression that defines the value of an enumeration constant shall be an integer constant expression that has a value representable as an <del><b>int</b></del><ins> implementation-defined signed or unsigned integer type of width greater than or equal to <b>int</b>, that is not a bit-precise integer type.</ins>
</div>

<div class="wording-numbered">
<ins>An enum specifier that contains an enum type specifier to provide a fixed underlying type shall not precede a <i>declarator</i> unless the opening brace <b>{</b>, enumerator list, and closing brace <b>}</b> precedes the <i>declarator</i> (6.7.6).</ins>
</div>

<div class="wording-numbered">
<ins>If an enum type specifier is present, then the longest possible sequence of tokens that can be interpreted as a type specifier is as interpreted part of the enum type specifier.</ins>
</div>

<b>Semantics</b>

<div class="wording-numbered">
<ins>The optional attribute specifier sequence in the enum specifier appertains to the enumeration; the attributes in that attribute specifier sequence are thereafter considered attributes of the enumeration whenever it is named. The optional attribute specifier sequence in the enumerator appertains to that enumerator.</ins>
</div>

<div class="wording-numbered">
The identifiers in an enumerator list are declared as constants <ins>that have the underlying type of the enumeration</ins> and may appear wherever such are permitted.<sup>133)</sup> An enumerator with <b>=</b> defines its enumeration constant as the value of the constant expression. If the first enumerator has no <b>=</b>, the value of its enumeration constant is 0. Each subsequent enumerator with no <b>=</b> defines its enumeration constant as the value of the constant expression obtained by adding 1 to the value of the previous enumeration constant. (The use of enumerators with <b>=</b> may produce enumeration constants with values that duplicate other values in the same enumeration.) The enumerators of an enumeration are also known as its members.
</div>

<div class="wording-numbered">
<del>Each</del><ins>For all enumerations without fixed underlying type, each</ins> enumerated type shall be compatible with <b>char</b>, a signed integer type, or an unsigned integer type <ins>(excluding the bit-precise integer types)</ins>. The choice of type is implementation-defined<sup>134)</sup>, but shall be capable of representing the values of all the members of the enumeration.
</div>

<div class="wording-numbered">
<ins>For all enumerations with a fixed underlying type, the enumerated type has the underlying type of the enumeration.</ins>
</div>

<div class="wording-numbered">
<del>The</del><ins>An</ins> enumerated type <ins>declaration without a fixed underlying type</ins> is <ins>an</ins> incomplete <ins>type</ins> until immediately after the <b>}</b> that terminates the list of enumerator declarations, and complete thereafter. <ins>An enumerated type declaration of an enumeration with fixed underlying type declares a complete type immediately after its enum type specifier, including after the opening <b>{</b> of its enumerator list.</ins>
</div>

<div class="wording-numbered">
<b>EXAMPLE</b> &emsp; The following fragment: â€¦
<p>
â€¦
</p>
</div>

<div class="wording-numbered">
<ins>EXAMPLE The following fragment:

```cpp
#include <limits.h>

enum E1: short;
enum E2: short;
enum E3;
enum E4 : unsigned long long;

enum E1 : short { m11, m12 };
enum E2 : long  { m21, m22 }; /* Constraint violation */

enum E3 : int;
enum E3 : int {
	m31,
	m32,
	m33 = sizeof(enum E3)
};

enum E4 : unsigned long long {
	m41 = ULLONG_MAX,
	m42 /* Constraint violation: unrepresentable value */
};

enum E1 x = m11;
enum E1 : long int x; /* Constraint violation: enum-type-specifier with declarator */
```

demonstrates many of the properties of multiple declarations of enumerations with underlying types. `E3` in particular is an enumeration declaration that chooses `int` as its underlying type, which matches the second declaration and the third declaration with definition. Despite `E3` being declared without an underlying type first, it is declared with an underlying type second that is the same as its first, so `sizeof(enum E3)` is not a constraint violation.
</ins>
</div>

<div class="wording-numbered">
<ins>EXAMPLE The following fragment:

```cpp
enum e { A };
enum e : int;
enum e;
```

is a valid triplet of declarations if the implementation-defined underlying type chosen for the first declaration matches the underlying type specified in the second declaration. Otherwise, it is a constraint violation.</ins>
</div>

<div class="wording-numbered">
<ins>EXAMPLE The following fragment:

```cpp
enum no_underlying {
	a0
};

int main () {
	int a = _Generic(a0,
		int: 2,
		unsigned char: 1,
		default: 0
	);
	int b = _Generic((enum no_underlying)a0,
		int: 2,
		unsigned char: 1,
		default: 0
	);
	return 0;
}
```

demonstrates the implementation-defined nature of the underlying type of enumerations using generic selection (6.5.1.1). The value of `a` after its initialization is implementation-defined: the constant can be of type `int` or a type with a width greater than `int`. The value of `b` after its initialization is implementation-defined: the enumeration must be compatible with a type large enough to fit the values of its enumeration constants. Since the only value is `0` for `a0`, `b` may `unsigned char`.

Now, consider the same fragment, but using a fixed underlying type:

```cpp
enum underlying : unsigned char {
	b0
};

int main () {
	int a = _Generic(b0,
		int: 2,
		unsigned char: 1,
		default: 0
	);
	int b = _Generic((enum underlying)b0,
		int: 2,
		unsigned char: 1,
		default: 0
	);
	return 0;
}
```

Here, we are guaranteed that `a` and `b` are both initialized to `1`. This makes enumerations with an underlying size more portable.
</ins>
</div>

Forward references: tags (6.7.2.3), <ins>declarators (6.7.6)</ins>.
</blockquote>
</div>


### Modify Section Â§6.7.2.3 Tags ### {#wording-specification-6.7.2.3}

<blockquote>â€ƒ
<div class="wording-section">
<b>6.7.2.3 Tags</b>

<p><b>Constraints</b></p>

<div class="wording-numbered wording-numbered-3">
A type specifier of the form
<dl>
<dd><b>enum</b> <i>identifier</i></dd>
</dl>
without an enumerator list shall only appear after <del>the type it specifies is complete</del><ins>its underlying type is determined. For an enum without fixed underlying type, this is after the closing <b>}</b> of the enumerator list.</ins>
</div>

â€¦

<div class="wording-numbered wording-numbered-7">
A type specifier of the form

<dl>
	<dd><i>struct-or-union</i> <i>attribute-specifier-sequence<sub>opt</sub></i></i> <i>identifier<sub>opt</sub></i> <b>{</b> <i>member-declaration-list</i> }</dd>
</dl>

or

<dl>
	<dd><b>enum</b> <i>attribute-specifier-sequence<sub>opt</sub></i> <i>identifier<sub>opt</sub></i> <ins><i>enum-type-specifier<sub>opt</sub></i></ins> <b>{</b> <i>enumerator-list</i> <b>}</b></dd>
</dl>

or

<dl>
	<dd><b>enum</b> <i>attribute-specifier-sequence<sub>opt</sub></i> <i>identifier<sub>opt</sub></i> <ins><i>enum-type-specifier<sub>opt</sub></i></ins> <b>{</b> <i>enumerator-list</i> <b>,</b> <b>}</b></dd>
</dl>

declares a structure, union, or enumerated type. â€¦
</div>

â€¦

<div class="wording-numbered wording-numbered-8">
A declaration of the form

<dl>
	<dd><i>struct-or-union</i> <i>attribute-specifier-sequence<sub>opt</sub></i></i> <i>identifier</i> <b>;</b></dd>
</dl>

<ins>or</ins>

<dl>
	<dd><ins><b>enum</b> <i>attribute-specifier-sequence<sub>opt</sub></i> <i>identifier</i> <ins><i>enum-type-specifier<sub>opt</sub></i></ins> <b>;</b></ins></dd>
</dl>

specifies a <del>structure or union type</del><ins>structure, union, or enumerated type</ins> and declares the identifier as a tag of that type.<sup>142)</sup> <ins>If the enumerated type does not contain the enum type specifier, the enumerated type is incomplete. Otherwise, the enumerated type is complete.</ins> The optional attribute specifier sequence appertains to the structure or union type being declared; the attributes in that attribute specifier sequence are thereafter considered attributes of the structure or union type whenever it is named.
</div>

<div class="wording-numbered wording-numbered-9">
If a type specifier of the form

<dl>
	<dd><i>struct-or-union</i> <i>attribute-specifier-sequence<sub>opt</sub></i></i> <i>identifier</i></dd>
</dl>

<ins>or</ins>

<dl>
	<dd><ins><b>enum</b> <i>attribute-specifier-sequence<sub>opt</sub></i> <i>identifier</i></ins></dd>
</dl>

occurs other than as part of one of the above forms, and no other declaration of the identifier as a tag is visible, then it declares an incomplete <del>structure or union type</del><ins>structure, union, or enumerated type</ins>, and declares the identifier as the tag of that type.<sup>142)</sup>
</div>

<div class="wording-numbered wording-numbered-10">
If a type specifier of the form

<dl>
	<dd><i>struct-or-union</i> <i>attribute-specifier-sequence<sub>opt</sub></i></i> <i>identifier</i></dd>
</dl>

or

<dl>
	<dd><b>enum</b> <ins><i>attribute-specifier-sequence<sub>opt</sub></i></ins> <i>identifier</i></dd>
</dl>

occurs other than as part of one of the above forms, and a declaration of the identifier as a tag is visible, then it specifies the same type as that other declaration, and does not redeclare the tag.
</div>
</div>
</blockquote>


### Add implementation-defined enumeration behavior to Annex J ### {#wording-specification-annex-j}




# Acknowledgements # {#acknowledgements}

Thanks to:

- Aaron Ballman for help with the initial drafting;
- Aaron Ballman, Aaron Bachmann, Jens Gustedt & Joseph Myers for questions, suggestions and offline discussion;
- Robert Seacord for editing suggestions; and,
- Clive Pygott for the initial draft of this paper.

We hope this paper serves you all well.
