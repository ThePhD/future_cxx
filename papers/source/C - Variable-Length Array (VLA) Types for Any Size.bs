<pre class='metadata'>
Title: Variable-Length Array (VLA) Types for Any Size
Shortname: XXX9
Revision: 0
!Previous Revisions: None
Status: P
Date: 2024-01-02
Group: WG14
!Proposal Category: Change Request, Feature Request  
!Target: C2y/C3a
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
Editor: Shepherd (Shepherd's Oasis LLC), shepherd@soasis.org
URL: https://thephd.dev/_vendor/future_cxx/papers/C%20-%20Variable-Length%20Array%20(VLA)%20Types%20for%20Any%20Size.html
!Paper Source: <a href="https://thephd.dev/_vendor/future_cxx/papers/source/C%20-%20Variable-Length%20Array%20(VLA)%20Types%20for%20Any%20Size.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/ThePhD/future_cxx/issues
Metadata Order: Previous Revisions, Editor, This Version, Paper Source, Implementation, Issue Tracking, Project, Audience, Proposal Category, Target
Markup Shorthands: markdown yes
Toggle Diffs: no
Abstract: Variable-Length Arrays are not usable in many expressions and drop their size when passed to functions, having to have that information reconstructed from parameters where there is a risk of getting that information incorrect or wrong. We propose a construct that carries around the size of the variable-length array inside of itself and is queryable in the same way as any other (run-time) sized type in the C ecosystem.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-color-fix.html
</pre>

<div class="pagebreak"></div>




# Changelog # {#changelog}

- Initial release. âœ¨




# Introduction and Motivation # {#intro}

	Meow. :3

	Bark. :3




# Design # {#design}

```cpp
#include <string.h>
#include <stdio.h>
#include <stddef.h>

void process_old(size_t n, size_t (*values)[n]) {
	/* code here */
	printf("sizeof(*values) == %ud", sizeof(*values));
}

void process_new(size_t (*values)[?]) {
	/* code here */
	printf("sizeof(*values) == %ud", sizeof(*values));
}

void process_new2(size_t values[?]) {
	/* code here */
	printf("sizeof(values) == %ud", sizeof(values));
}

int main (int argc, char* argv[]) {
	size_t argv_sizes[argc];
	for (int i = 0; i < argc; ++i) {
		argv_sizes[i] = strlen(argv[i]);
	}

	process_old(956749, &argv_sizes); // Contains a lie
	process_new(argv_sizes); // Unable to lie
	process_new2(&argv_sizes); // Unable to lie

	return _Generic(argv_sizes,
		int[?]: 0,
		default: 1,
	);
}
```
