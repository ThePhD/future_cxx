<pre class='metadata'>
Title: Relax va_start Requirements to Match C
H1: Relax <code>va_start</code> Requirements to Match C
Shortname: D2537
Revision: 2
Audience: LEWG
Status: D
Group: WG21
URL:
!Target: C++26
!Latest: <a href="https://thephd.dev/_vendor/future_cxx/papers/d2537.html">https://thephd.dev/_vendor/future_cxx/papers/d2537.html</a>
Repository: ThePhD/future_cxx
Editor: JeanHeyd Meneide (https://thephd.dev), phdofthehouse@gmail.com
Date: 2022-11-09
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract: At the WG14 January/February Meeting on February 1st, WG14 voted heavily in favor of allowing <code>va_start/arg/end/list</code>-style functions to be able to take 0 arguments, alongside removing the requirement of a special "last parameter" being passed to <code>va_start</code>. C++ has always allowed function declarations and definitions with zero arguments, but intentionally left <code>va_start</code> un-updated to match C's existing practice. This paper follows the new direction for C to remove the restrictions from <code>va_start</code> in C.
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-wording.html
</pre>

<pre class="include-raw">
path: resources/css/bikeshed-color-fix.html
</pre>




# Revision History # {#changelog}



## Revision 2 - November 9th, 2022 ## {#changelog-r2}

	- Propose 2 different specifications in [[#wording-library-alt1.cstdarg.syn|Alternative 1]] and [[#wording-library-alt2.cstdarg.syn|Alternative 2]] for wording with respect to how C23 does it. Ask CWG and EWG for feedback.



## Revision 1 - July 22nd, 2022 ## {#changelog-r1}

	- Aligned specification with (now accepted) C23 paper for this feature, [[n2975]], losing the `parmN` specification.



## Revision 0 - February 15th, 2022 ## {#changelog-r0}

	- SG22 saw this paper on February 11th, 2022 and voted in favor of forwarding it towards WG21 and for WG14. They do not see any compatibility issues, but recommended two things:
		- Allowing declarations but not definitions in the C paper;
		- and, talking about ABI changes.
	- Initial Release! ðŸŽ‰




# Introduction and Motivation # {#intro}

C merged a paper to remove functions without prototypes ("K&R Functions") from C23, closing the chapter on a nearly 40 year old deprecated feature. Unfortunately, K&R declarations served a number of useful purposes that could not be effectively approximated by any other function declaration in C. In C++, old-style K&R functions on both an ABI and an API level could be approximated with a declaration such as `void f(...);`. This was impossible in C thanks to the requirement in both the language that there must be at least one parameter before the `...`, and that the last parameter must be passed to `va_start`. This is bad because many inter-language function calls and similar were enabled in plain, standard C by using K&R declarations and then having the non-C side use assembly or other tricks to appropriately handle both passed-in arguments as well as return values:

```cpp
// Pre-C23 K&R Declaration
double compute_values();

int main () {
	// C: allowed usage under K&R rules, removed in C23
	// C++: ill-formed (constraint violation), function takes 0 arguments
	double x = compute_values("with_pi", 2.4, 2.7, true);
	return (int)x;
}
```

The implementation of `compute_values` here could be done VIA assembly or with other tricks in other languages, allowing a C codebase to talk to other programming languages and tools efficiently without having to create a dedicated Foreign Function Interface. Unfortunately, the removal of K&R declarations in C has made the above code illegal in standard C, and taken away a fairly valid use case for prototype-less functions.



## The Solution ## {#intro-solution}

C is moving to fix this problem by allowing `void f(...);` as a valid function declaration, as shown in [[n2919]]. This will allow the same level of power as K&R declarations without the problematic no-arguments-but-takes-any-number-of-arguments-actually double-meaning syntax. In order to do this, C is updating the `va_start` macro as well as fixing its language rules. C++ does not need to fix any of its language rules:

```cpp
// Valid in C23, always valid C++
double compute_values(...);

int main () {
	// C and C++: allowed and portable in both languages
	double x = compute_values("with_pi", 2.4, 2.7, true);
	return (int)x;
}
```

Since C++ includes the `<stdarg.h>` header as part of its library offerings in `<cstdarg>`, some adjustments must be made to the contents of the synopsis and wording for `<cstdarg>` to match the changes that will be made for C. Additionally, some modifications must be made to the constraints to match the changes C makes. Because this is something that was not previously allowed before, it has no impact on existing implementations and for all major compilers (GCC, MSVC, Clang, and their derivates) they have the necessary built-in compiler magic to produce working library implementations that do not require the first argument to `va_start`.

An example proving that this is possible is publicly available here: [[ztd.vargs|ztd.vargs (https://ztdvargs.readthedocs.io/en/latest/)]]. The ABI for variadic arguments versus K&R prototypes is no affected because the C ABI did not allow this declaration before, so there is no existing standard code for C that could rely on this function call. C++ may have an ABI for it, but no standards-compliant code could access any of the function arguments using `va_start`/`va_arg`/`va_end` thanks to the macro's specification. Therefore, this feature either introduces a new ABI that did not previously exist on the platform at all, or simply utilizes an existing ABI (the example library implementation leverages well-defined existing ABIs in C++ implementations in order to work properly).


### What if the ABI is different? ### {#intro-solution-abi}

There are a handful of C compilers that allow declarations using variable arguments without a first parameter, and some shared C and C++ compiler implementations which also allow it by having `extern "C"` functions declared without the first parameter in C++. Therefore, there can be compilers which do not share an ABI for their K&R and their variable argument declarations.

The solution here is not something that can be specified in the standard. This paper can only recommend that implementations which need more explicit control over the resulting ABI of their K&R functions may need to provide an attribute. like below, when performing the migration:

```cpp
[[impl::krdecl]] double compute_values(...);

int main () {
	// compute_values uses right register and stack allocation convention
	double x = compute_values("with_pi", 2.4, 2.7, true);
	return (int)x;
}
```

This can alleviate much of the trouble of porting, and can still be automated when upgrading to C23. We do not have any means in the standard to provide an `[[impl::krdecl]]` or similar because ABI, register usage, and similar calling convention work is somewhat outside the scope of the standard.


### Allow Declaration, not but don't allow Definitions? ### {#intro-solution-decl.vs.defn}

There was discussion about allowing this to change only the ability in C to declare these C functions, and not to define them. This is different from C++ where it is both allowed to be declared and defined with no first parameter. Clang also has an extension that allows these functions to be both declared and defined with C or C++-style name mangling:

```cpp
void func(...) __attribute__((overloadable)) {

}

int main() {
  func(1, 2, 3);
}
```

The original paper in [[n2975]] and this paper posit that it would be too inconsistent to allow declaratins (like C++) but disallow definitions (unlike C++) in C. Therefore, the C paper is going forward with changing `va_start` and allowing both declarations and definitions. This paper is also being put in the C++ mailing list to bring C++ up to the same level of compatibility with C, if the N2919 change is made. If the change is withdrawn than this paper will be removed.




# Specification # {#wording}

The specification is relative to the latest C++ Working Draft, [[n4901]].



## Library Wording ## {#wording-library}


### ALTERNATIVE 1: Modify Header <cstdarg> Synopsis [<a href="https://eel.is/c++draft//cstdarg.syn">cstdarg.syn</a>] ### {#wording-library-alt1.cstdarg.syn}

<blockquote>
<div class="wording-section">

<div class="wording-section-header">
<span class="clause-title"><b>17.13.2</b></span>
<span><b>Header `<cstdarg>` Synopsis</b></span>
<span class="stable-tag">[<a href="https://eel.is/c++draft/cstdarg.syn">cstdarg.syn</a>]</span>
</div>

<div>

```cpp
namespace std {
  using va_list = see below;
}

#define va_arg(V, P) see below
#define va_copy(VDST, VSRC) see below
#define va_end(V) see below
```
<del>

```cpp
#define va_start(V, P) see below
```
</del>
<ins>

```cpp
#define va_start(V, ...) see below
```
</ins>

```cpp
}
```
</div>

<div class="wording-numbered">

The contents of the header `<cstdarg>` are the same as the C standard library header `<stdarg.h>`, with the following changes: The restrictions that ISO C places on the second parameter<ins>, if provided,</ins> to the `va_Â­start` macro in header `<stdarg.h>` are different in this document. The <ins>second parameter to `va_start`, if provided,</ins><del>parameter `parmN`</del> is the rightmost parameter in the variable parameter list of the function definition (the one just before the `...`)<sup>207</sup>. If the <ins>provided </ins>parameter <del>`parmN`</del> is a pack expansion ([temp.variadic]) or an entity resulting from a lambda capture ([expr.prim.lambda]), the program is ill-formed, no diagnostic required. If the <ins>provided </ins>parameter <del>`parmN`</del> is of a reference type, or of a type that is not compatible with the type that results when passing an argument for which there is no parameter, the behavior is undefined.

SEE ALSO: ISO C 7.16.1.1
</div>
</div>
</blockquote>


### ALTERNATIVE 2: Modify Header <cstdarg> Synopsis [<a href="https://eel.is/c++draft//cstdarg.syn">cstdarg.syn</a>] ### {#wording-library-alt2.cstdarg.syn}

<blockquote>
<div class="wording-section">

<div class="wording-section-header">
<span class="clause-title"><b>17.13.2</b></span>
<span><b>Header `<cstdarg>` Synopsis</b></span>
<span class="stable-tag">[<a href="https://eel.is/c++draft/cstdarg.syn">cstdarg.syn</a>]</span>
</div>

<div>

```cpp
namespace std {
  using va_list = see below;
}

#define va_arg(V, P) see below
#define va_copy(VDST, VSRC) see below
#define va_end(V) see below
```
<del>

```cpp
#define va_start(V, P) see below
```
</del>
<ins>

```cpp
#define va_start(V, ...) see below
```
</ins>

```cpp
}
```
</div>

<div class="wording-numbered">

The contents of the header `<cstdarg>` are the same as the C standard library header `<stdarg.h>`<del>, with the following changes: The restrictions that ISO C places on the second parameter to the va_Â­start macro in header <stdarg.h> are different in this document. The parameter parmN is the rightmost parameter in the variable parameter list of the function definition (the one just before the ...). If the parameter parmN is a pack expansion ([temp.variadic]) or an entity resulting from a lambda capture ([expr.prim.lambda]), the program is ill-formed, no diagnostic required. If the parameter parmN is of a reference type, or of a type that is not compatible with the type that results when passing an argument for which there is no parameter, the behavior is undefined.</del><ins>. Any arguments provided after `V` are ignored.</ins>

SEE ALSO: ISO C 7.16.1.1
</div>
</div>
</blockquote>

<pre class=biblio>
{
	"n2975": {
		"title": "Relax requirements for variadic parameter lists",
		"authors": [
			"Alex Gilding",
			"JeanHeyd Meneide"
		],
		"href": "http://open-std.org/JTC1/SC22/WG14/www/docs/n2975.pdf",
		"publisher": "ISO/IEC JTC1 SC22 WG14 - Programming Language, C",
		"date": "April 15th, 2022"
	},
	"ztd.vargs": {
		"title": "ztd.vargs",
		"authors": [
			"JeanHeyd Meneide",
			"Shepherd's Oasis, LLC"
		],
		"href": "https://ztdvargs.readthedocs.io/en/latest/",
		"publisher": "Shepherd's Oasis, LLC",
		"date": "November 22nd, 2021"
	}
}
</pre>
