<pre class='metadata'>
Title: std::to_underlying for enumerations
Shortname: P1682
Revision: 3
Audience: LWG
Status: P
Group: WG21
URL: 
!Target: C++23
!Latest: <a href="https://thephd.github.io/_vendor/future_cxx/papers/d1682.html">https://thephd.github.io/_vendor/future_cxx/papers/d1682.html</a>
Repository: ThePhD/future_cxx
Editor: JeanHeyd Meneide, phdofthehouse@gmail.com
Date: 2021-01-22
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract: A proposal to add a short utility function to handle going from an enumeration to its underlying integral value for safety and ease of use.
</pre>

<style>

:root {
	/* Default (light) theme */
	--del-text-color: rgb(255, 25, 25);
	--del-text-background-color: rgb(255, 175, 175);
	--ins-text-color: rgb(10, 180, 35);
	--ins-text-background-color: rgb(175, 250, 190);
}

/* dark theme */
@media (prefers-color-scheme: dark) {
	:root {
		--del-text-color: rgb(255, 52, 52);
		--del-text-background-color: rgb(82, 25, 25);
		--ins-text-color: rgb(140, 255, 140);
		--ins-text-background-color: rgb(25, 82, 25);
	}
}

@media print {
	.pagebreak { break-after: always }
}

.tg  {
	border-collapse: collapse;
	border-spacing:0;
}

.tg td{
	padding:10px 10px;
	border-style: solid;
	border-width:1px;
	overflow: hidden;
	word-break: normal;
	border-color: var(--table-border-color, inherit);
}
.tg th{
	font-weight: normal;
	padding: 10px 10px;
	border-style: solid;
	border-width: 1px;
	overflow: hidden;
	word-break: normal;
	border-color: black;
}
.tg .tg-c3ow { 
	border-color: inherit;
	text-align: center;
	vertical-align: top
}

ins * {
	text-decoration: underline;
	text-decoration-color: var(--ins-text-color);
	background: var(--ins-text-background-color);
	background-color: var(--ins-text-background-color);
}

del * {
	text-decoration: line-through;
	text-decoration-color: var(--del-text-color);
	background: var(--del-text-background-color);
	background-color: var(--del-text-background-color);
}

code.c-kw {
	font-weight: bold;
}

math, span.math {
	font-family: serif;
	font-style: italic;
}

ul {
	list-style-type: "— ";
}

div.wording-section {
	counter-reset: wording-paragraph;
}

div.wording-numbered-0 {
	counter-reset: wording-paragraph -1;
}

div.wording-numbered-1 {
	counter-reset: wording-paragraph 0;
}

div.wording-numbered-2 {
	counter-reset: wording-paragraph 1;
}

div.wording-numbered-3 {
	counter-reset: wording-paragraph 2;
}

div.wording-numbered-4 {
	counter-reset: wording-paragraph 3;
}

div.wording-numbered-5 {
	counter-reset: wording-paragraph 4;
}

div.wording-numbered-6 {
	counter-reset: wording-paragraph 5;
}

div.wording-numbered-7 {
	counter-reset: wording-paragraph 6;
}

div.wording-numbered-8 {
	counter-reset: wording-paragraph 7;
}

div.wording-numbered-9 {
	counter-reset: wording-paragraph 8;
}

div.wording-numbered-10 {
	counter-reset: wording-paragraph 9;
}

div.wording-numbered, div.wording-newnumbered {
	margin-left: 2em;
	margin-top: 1em;
	margin-bottom: 1em;
}

div.wording-numbered:before, div.wording-newnumbered:before {
	position: absolute;
	margin-left: -2em;
	display: block;
}

div.wording-numbered:before {
	content: counter(wording-paragraph);
	counter-increment: wording-paragraph;
}

div.wording-newnumbered:before {
	content: "�";
}

div.wording-numbered ul, div.wording-newnumbered ul {
	counter-reset: wording-list-item;
}

div.wording-numbered li, div.wording-newnumbered li {
	margin-left: 3em;
}

div.wording-numbered li:before, div.wording-newnumbered li:before {
	position: absolute;
	margin-left: -4.8em;
	display-style: block;
}

div.wording-numbered li:before {
	content: "(" counter(wording-paragraph) "." counter(wording-list-item) ")";
	counter-increment: wording-list-item;
}

div.wording-newnumbered li:before {
	content: "(�." counter(wording-list-item) ")";
	counter-increment: wording-list-item;
}

div.wording-numbered li.c-list:before, div.wording-newnumbered li.c-list:before {
	content: "";
	counter-increment: wording-list-item;
}
</style>


# Revision History # {#changelog}



## Revision 3 - January 22nd, 2021 ## {#changelog-r3}

	- Remove unnecessary comment in function description.
	- Use proper format for `<version>` and give more adequate instructions.



## Revision 2 - January 16th, 2021 ## {#changelog-r2}

	- Remove constraint since `std::underlying_type_t<T>` is SFINAE-friendly.
	- Fix unnecessary `std::` qualification.



## Revision 1 - August 5th, 2019 ## {#changelog-r1}

	- Approved for Library Working Group in the Köln, Germany 2019 meeting!



## Revision 0 - June 17th, 2019 ## {#changelog-r0}

	- Initial release.



# Motivation # {#motivation}

Many codebases write a version of a small utility function converting an enumeration to its underlying type. The reason for this function is very simple: applying `static_cast<int>`/ `static_cast<unsigned long>` (or similar) to change an enumeration to its underlying type makes it harder to quickly read and maintain places where the user explicitly converts from a strongly-typed enumeration to its underlying value. For the purposes of working with an untyped API or similar, casts just look like any old cast, making it harder to read code and potentially incorrect when enumeration types are changed from signed / unsigned or similar.

Much of the same rationale is why this is Item 10 in Scott Meyers' Effective Modern C++. In Around Christmas of 2016, the number of these function invocations for C++ was around 200 including both to_underlying/to_underlying_type/toUtype (the last in that list being the way it was spelled by Scott Meyers). As of June 17th, 2019, the collective hits on GitHub and other source engines totals well over 1,000 hits, disregarding duplication from common base frameworks such as the realm mobile app database and more. The usefulness of this function appears in Loggers for enumerations, casting for C APIs, stream operations, and more.

We are seeing an explosive move and growth in usage of Modern C++ utilities, and the growth in this usage clearly indicates that the foresight and advice of Scott Meyers is being taken seriously by the full gamut of hobbyist to commercial software engineers. Therefore, it would seem prudent to make the spelling and semantics of this oft-reached-for utility standard in C++.

Typical casts can also mask potential bugs from size/signed-ness changes and hide programmer intent. For example, going from this code,

```
enum class ABCD {
	A = 0x1012,
	B = 0x405324,
	C = A & B
};

// sometime later ...

void do_work(ABCD some_value) {
	// no warning, no visual indication,
	// is this what the person wanted,
	// what was the original intent in this
	// 'harmless' code?
	internal_untyped_api(static_cast<int>(some_value));
}
```

To this code:

```
#include <cstdint>

// changed enumeration, underlying type
enum class ABCD : uint32_t {
	A = 0x1012,
	B = 0x405324,
	C = A & B,
	D = 0xFFFFFFFF // !!
};

// from before:

void do_work(ABCD some_value) {
	// no warning, no visual indication,
	// is this what the person wanted,
	// what was the original intent in this
	// 'harmless' code?
	internal_untyped_api(static_cast<int>(some_value));
}
```

is dangerous, but the `static_cast<int>` is seen by the compiler as intentional by the user.

Calling `do_work(ABCD::D);` is a code smell internally because the cast is the wrong one for the enumeration. If the internal untyped API takes an integral value larger than the size of `int` and friends, then this code might very well pass a bit pattern that will be interpreted as the wrong value inside of the `internal_untyped_api`, too. Of course, this change does not trigger warnings or errors: `static_cast<int>` is a declaration of intent that says "I meant to do this cast", even if that cast was done before any changes or refactoring was performed on the enumeration.

Doing it the right way is also cumbersome:

```
void do_work(ABCD some_value) {
	// will produce proper warnings,
	// but is cumbersome to type
	internal_untyped_api(static_cast<std::underlying_type_t<ABCD>>(some_value));
}
```

It is also vulnerable to the parameter's type changing from an enumeration to another type that is convertible to an integer. Because it is still a `static_cast`, unless someone changes the type for `do_work` while also deleting `ABCD`, that code will still compile:

```
void do_work(OtherEnumeration value) {
	// no warnings, no errors, ouch!
	internal_untyped_api(static_cast<std::underlying_type_t<ABCD>>(some_value));
}
```

We propose an intent-preserving function used in many codebases across C++ called `std::to_underlying`, to be used with enumeration values.




# Design # {#design}

`std::to_underlying` completely avoids all of the above-mentioned problems related to code reuse and refactoring. It makes it harder to write bugs when working with strongly-typed enumerations into untyped APIs such with things such as C code and similar. It only works on enumeration types. It will `static_cast` the enumeration to integral representation with `std::underlying_type_t<T>`. This means that the value passed into the function provides the type information, and the type information is provided by the compiler, not by the user.

This makes it easy to find conversion points for "unsafe" actions, reducing search and refactoring area. It also puts the `static_cast` inside of a utility function, meaning that warnings relating to size and signed-ness differences can still be caught in many cases since the result's usage comes from a function, not from an explicitly inserted user cast.

```
#include <utility>

void do_work(MyEnum value) {
	// changes to match its value,
	// proper warnings for signed/unsigned mismatch,
	// and ease-of-use!
	internal_untyped_api(std::to_underlying(some_value));
}
```




# Proposing Wording # {#wording}

The wording proposed here is relative to [[n4800]].



## Proposed Feature Test Macro ## {#wording-feature}

The proposed library feature test macro is `__cpp_lib_to_underlying`.



## Intent ## {#wording-intent}

The intent of this wording is to introduce 1 function into the `<utility>` header called `to_underlying`. If the input to the function is not an enumeration, then the program is ill-formed.



## Proposed Library Wording ## {#wording-library}

Append to §17.3.2 Header `<version>` [**version.syn**]'s a single line for `__cpp_lib_to_underlying` (EDITOR: please replace 2XXXXXL):

<ins>
<blockquote>
<xmp>
#define __cpp_lib_to_underlying 2XXXXXL // also in <utility>
</xmp>
</blockquote>
</ins>

Add the following into §20.2.1 Header `<utility>` [utility.syn] synopsis:

<ins>
<blockquote>
<xmp>
// [utility.underlying], to_underlying
template <class T>
    constexpr underlying_type_t<T> to_underlying( T value ) noexcept;
</xmp>
</blockquote>
</ins>

Add a new section §20.2.7 Function template `to_underlying` [utility.underlying]:

<ins>
<blockquote>
<p>**20.2.7** Function template `to_underlying` <span float="right">[**utility.underlying**]</span></p>

<xmp>
template <class T>
    constexpr underlying_type_t<T> to_underlying( T value ) noexcept;
</xmp>

<p><sup>1</sup> Returns: `static_cast<underlying_type_t<T>>(value)`.</p>
</blockquote>
</ins>


# Acknowledgements # {#acknowledgements}

Thanks to Rein Halbersma for bringing this up as part of the things that would make programming in his field easier and the others who chimed in. Thanks to Walter E. Brown for encouraging Rein Halbersma to get this paper moving.



<pre class=biblio>
{
	"n4800": {
		"authors": [
			"ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee",
			"Richard Smith"
		],
		"title": "N4800 - Working Draft, Standard for Programming Language C++",
		"href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n4800.pdf",
		"date": "January 21st, 2019"
	}
}
</pre>
